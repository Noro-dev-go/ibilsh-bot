from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CallbackQueryHandler
from telegram.error import BadRequest

from datetime import datetime

from collections import defaultdict

from services.notifier import notify_admin_about_postpone
from services.google_sheets import log_payment_postpone

import uuid

from dotenv import load_dotenv

from database.db import get_connection
from database.users import check_user, get_user_info
from database.clients import get_client_by_tg_id
from database.repairs import  get_all_done_repairs
from database.postpone import save_postpone_request, get_postpone_for_date, get_active_postpones, has_active_postpone, get_postpone_dates_by_tg_id, close_postpone
from database.scooters import get_scooters_by_client, get_scooter_by_id
from database.payments import get_unpaid_payments_by_scooter, get_payments_by_scooter, update_payment_amount,  save_payment_schedule_by_scooter, mark_payments_as_paid

from handlers.cancel_handler import universal_cancel_handler, exit_lk_handler
from handlers.register_client import cleanup_previous_messages
from handlers.keyboard_utils import get_keyboard
from handlers.admin_edit import cleanup_client_messages

from services.yookassa_service import create_payment

from utils.payments_utils import format_payment_schedule, get_payment_id_by_date
from utils.time_utils import get_today
from utils.cleanup import cleanup_lk_messages
from utils.schedule_utils import get_next_fridays
from utils.notify_utils import payment_confirm_registry


from datetime import date, timedelta



load_dotenv()

ASK_NAME, ASK_PHONE=range(2)

ASK_WEEKS = 101

ASK_WEEKS_NEW_ALL = 3001

CONFIRM_POSTPONE = 1

PERSONAL_MENU = 100

cancel_fallback = MessageHandler(
    filters.Regex("^(‚¨ÖÔ∏è –ù–∞–∑–∞–¥|–Ω–∞–∑–∞–¥|–æ—Ç–º–µ–Ω–∞|–≤—ã—Ö–æ–¥|/start|/menu)$"),
    universal_cancel_handler
)


payment_back_fallback = MessageHandler(
    filters.Regex("^/exit$"),
    exit_lk_handler
)

async def handle_back_silent(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cleanup_lk_messages(update, context)
    await update.callback_query.answer()


async def go_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()

    keyboard = get_keyboard()
    text = (
        "‚ö° –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! –≠—Ç–æ –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Ibilsh ‚Äî —Ç–≤–æ–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –º–∏—Ä–µ —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤!\n\n"
        "üîπ –•–æ—á–µ—à—å –∫ –Ω–∞–º –≤ –∫–æ–º–∞–Ω–¥—É? ‚Äî –û—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É –Ω–∞ —Ç–≤–æ–π –Ω–æ–≤–µ–Ω—å–∫–∏–π —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤!\n"
        "üîπ –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å? ‚Äî –ú–∞—Å—Ç–µ—Ä –±—É–¥–µ—Ç —É —Ç–µ–±—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤!\n"
        "üîπ –£–∂–µ —Å –Ω–∞–º–∏? ‚Äî –ó–∞–≥–ª—è–Ω–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!\n"
        "üîπ –ü–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? ‚Äî –ú—ã —Å–æ–±—Ä–∞–ª–∏ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö!\n\n"
        "üëá –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:"
    )

    try:
        await update.callback_query.message.edit_text(text, reply_markup=keyboard)
    except Exception as e:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ –∏–ª–∏ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ, fallback –Ω–∞ send_message
        await update.effective_chat.send_message(text, reply_markup=keyboard)


async def back_to_personal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await cleanup_lk_messages(update, context)
    await personal_account_entry(update, context)


async def exit_to_personal_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—á–∏—Å—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—É–¥–∞–ª–µ–Ω–∏–µ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    await cleanup_lk_messages(update, context)

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –õ–ö
    await personal_account_entry(update, context)    



async def personal_menu_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return PERSONAL_MENU

async def personal_account_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    context.user_data["start_message_id"] = message.message_id  # ‚úÖ —Ñ–∏–∫—Å–∏—Ä—É–µ–º ID

    #await cleanup_previous_messages(update, context)
    await cleanup_lk_messages(update, context)
    await cleanup_client_messages(update, context)

    user = update.effective_user
    tg_id = user.id

    if not check_user(tg_id):
        try:
            await message.edit_text(
                "üîí –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                "–í—ã –ø–æ–∫–∞ –Ω–µ –∞—Ä–µ–Ω–¥—É–µ—Ç–µ —Å–∫—É—Ç–µ—Ä —á–µ—Ä–µ–∑ –∫–æ–º–ø–∞–Ω–∏—é Ibilsh.\n\n"
                "‚ö†Ô∏è –°—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã ‚Äî –∏ –¥–æ—Å—Ç—É–ø –∫ –õ–ö –æ—Ç–∫—Ä–æ–µ—Ç—Å—è!"
            )
        except:
            msg = await message.reply_text(
                "üîí –û—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.\n"
                "–í—ã –ø–æ–∫–∞ –Ω–µ –∞—Ä–µ–Ω–¥—É–µ—Ç–µ —Å–∫—É—Ç–µ—Ä —á–µ—Ä–µ–∑ –∫–æ–º–ø–∞–Ω–∏—é Ibilsh.\n\n"
                "‚ö†Ô∏è –°—Ç–∞–Ω—å—Ç–µ —á–∞—Å—Ç—å—é –Ω–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã ‚Äî –∏ –¥–æ—Å—Ç—É–ø –∫ –õ–ö –æ—Ç–∫—Ä–æ–µ—Ç—Å—è!"
            )
            context.user_data["lk_message_ids"].append(msg.message_id)
        return

    user_data = get_user_info(tg_id)

    text = (
        f"‚úÖ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user_data['full_name']}!\n"
        f"üì¶ –í–∞—à —Å—Ç–∞—Ç—É—Å: <b>–∞—Ä–µ–Ω–¥–∞ –∞–∫—Ç–∏–≤–Ω–∞</b>\n\n"
        f"‚öôÔ∏è –í—ã –º–æ–∂–µ—Ç–µ:\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–µ–º—É —Ç–∞—Ä–∏—Ñ—É –ø–æ –∞—Ä–µ–Ω–¥–µ\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–µ–π\n"
        f"‚Ä¢ –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã\n"
        f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Ä–µ–º–æ–Ω—Ç–æ–≤, –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n"
        f"‚Ä¢ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –æ–ø–ª–∞—Ç—É –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é\n\n"
        f"<b>üìå –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª:</b>"
    )

    reply_markup = InlineKeyboardMarkup([
        [InlineKeyboardButton("üõµ –°—Ç–∞—Ç—É—Å –∞—Ä–µ–Ω–¥—ã", callback_data="status")],
        [InlineKeyboardButton("üõ† –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤", callback_data="repairs")],
        [InlineKeyboardButton("üìÖ –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π", callback_data="payments")],
        [InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å –∞—Ä–µ–Ω–¥—É", callback_data="pay_all")],
        [InlineKeyboardButton("üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç—ë–∂", callback_data="postpone")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="client_to_main")]
    ])

    try:
        msg = await message.edit_text(text, parse_mode="HTML", reply_markup=reply_markup)
        context.user_data["main_message_id"] = msg.message_id
    except Exception as e:
        # fallback ‚Äî –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ä–æ–µ)
        msg = await message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)
        context.user_data["main_message_id"] = msg.message_id




async def personal_account_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await personal_account_entry(update, context)

async def handle_status_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await handle_status(update, context)

async def handle_repairs_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await handle_repair_history(update, context)


async def handle_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    tg_id = update.effective_user.id
    client = get_client_by_tg_id(tg_id)

    if not client:
        msg = await update.callback_query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞.")
        context.user_data.setdefault("lk_message_ids", []).append(msg.message_id)
        return

    client_id = client["id"]
    scooters = get_scooters_by_client(client_id)
    username = client['username'] or "-"

    text = (
        f"üë§ <b>{client['full_name']}</b>, {client['age']} –ª–µ—Ç\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {client['phone']}\n"
        f"üè¢ –†–∞–±–æ—Ç–∞: {client['workplace'] or '‚Äî'}\n"
        f"üÜî Telegram ID: <code>{tg_id}</code>\n"
        f"üë§ Username: {username}\n"
        f"\n<b>üõµ –°–∫—É—Ç–µ—Ä—ã:</b>\n"
    )

    for idx, scooter in enumerate(scooters, 1):
        tariff_line = scooter['tariff_type']
        if scooter['tariff_type'] == "–í—ã–∫—É–ø" and scooter['buyout_weeks']:
            tariff_line += f" ({scooter['buyout_weeks']} –Ω–µ–¥.)"
        tariff_line += f" ‚Äî {scooter['weekly_price']}‚ÇΩ/–Ω–µ–¥"

        options = [
            f"üìÑ –î–æ–≥–æ–≤–æ—Ä: {'‚úÖ' if scooter['has_contract'] else '‚ùå'}",
            f"üîë –í—Ç–æ—Ä—ã–µ –∫–ª—é—á–∏: {'‚úÖ' if scooter['has_second_keys'] else '‚ùå'}",
            f"üì° –î–∞—Ç—á–∏–∫: {'‚úÖ' if scooter['has_tracker'] else '‚ùå'}",
            f"üõë –û–≥—Ä–∞–Ω–∏—á–∏—Ç–µ–ª—å: {'‚úÖ' if scooter['has_limiter'] else '‚ùå'}",
            f"üö≤ –ü–µ–¥–∞–ª–∏: {'‚úÖ' if scooter['has_pedals'] else '‚ùå'}",
            f"üì∂ –ü–≠–°–ò–ú: {'‚úÖ' if scooter['has_sim'] else '‚ùå'}"
        ]

        text += (
            f"\n<b>–°–∫—É—Ç–µ—Ä ‚Ññ{idx}:</b>\n"
            f"‚Ä¢ –ú–æ–¥–µ–ª—å: {scooter['model']}\n"
            f"‚Ä¢ VIN: {scooter['vin']}\n"
            f"‚Ä¢ VIN –º–æ—Ç–æ—Ä–∞: {scooter['motor_vin']}\n"
            f"‚Ä¢ –í—ã–¥–∞–Ω: {scooter['issue_date'].strftime('%d.%m.%Y')}\n"
            f"‚Ä¢ –¢–∞—Ä–∏—Ñ: {tariff_line}\n"
            f"{chr(10).join(options)}\n"
        )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

    # üëâ –µ—Å–ª–∏ main_message_id —É–∂–µ –µ—Å—Ç—å ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º
    if "main_message_id" in context.user_data:
        await cleanup_lk_messages(update, context, new_text=text, reply_markup=keyboard)
    else:
        msg = await update.callback_query.message.reply_text(text, parse_mode="HTML", reply_markup=keyboard)
        context.user_data["main_message_id"] = msg.message_id


async def handle_payments(update: Update, context: ContextTypes.DEFAULT_TYPE):
   
    tg_id = update.effective_user.id

    client = get_client_by_tg_id(tg_id)
    if not client:
        msg = await update.callback_query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞.")
        context.user_data.setdefault("lk_message_ids", []).append(msg.message_id)
        return

    client_id = client["id"]
    scooters = get_scooters_by_client(client_id)

    text = "<b>üìÖ –í–∞—à –≥—Ä–∞—Ñ–∏–∫ –ø–ª–∞—Ç–µ–∂–µ–π:</b>\n"
    keyboard_buttons = []

    for idx, scooter in enumerate(scooters, 1):
        payments = get_payments_by_scooter(scooter["id"])
        postpones = get_active_postpones(scooter["id"])  # ‚úÖ –ø–æ–ª—É—á–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã —Å –Ω—É–∂–Ω—ã–º–∏ –ø–æ–ª—è–º–∏

        # –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –∏—Ö –≤ —Å–ª–æ–≤–∞—Ä–∏ –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –≤ format_payment_schedule
        postpones_dicts = [
            {
                "original_date": row[0],
                "scheduled_date": row[1],
                "with_fine": row[2],
                "fine_amount": row[3],
                "requested_at": row[4],
            }
            for row in postpones
        ]

        schedule = format_payment_schedule(tg_id, payments, postpones_dicts)
        text += f"\nüìã<b>–°–∫—É—Ç–µ—Ä ‚Ññ{idx}:</b>\n{schedule}\n"

    keyboard_buttons = [
    [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard_buttons)
    if "main_message_id" in context.user_data:
        await cleanup_lk_messages(update, context, new_text=text, reply_markup=reply_markup)
    else:
        msg = await update.callback_query.message.reply_text(text, parse_mode="HTML", reply_markup=reply_markup)
        context.user_data["main_message_id"] = msg.message_id
   

# –°—Ç–∞—Ä—Ç –æ–ø–ª–∞—Ç—ã –ø–æ –Ω–∞–∂–∞—Ç–∏—é –Ω–∞ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∏—Ç—å"

async def handle_pay_all_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    tg_id = query.from_user.id
    client = get_client_by_tg_id(tg_id)
    if not client:
        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞.")
        return ConversationHandler.END

    scooters = get_scooters_by_client(client["id"])
    all_unpaid = []
    today = get_today()
    active_postpones = []

    for scooter in scooters:
        unpaid = get_unpaid_payments_by_scooter(scooter["id"])
        for row in unpaid:
            all_unpaid.append((scooter, row))
            # –∏—â–µ–º –ø–µ—Ä–µ–Ω–æ—Å –∏–º–µ–Ω–Ω–æ –ø–æ —ç—Ç–æ–π –¥–∞—Ç–µ –ø–ª–∞—Ç–µ–∂–∞
            postpone_row = get_postpone_for_date(scooter["id"], row[1])
            if postpone_row:
                active_postpones.append({
                    "scooter": scooter,
                    "payment": row,
                    "postpone": postpone_row,
                })

    if not all_unpaid:
        await query.message.reply_text("‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.")
        return ConversationHandler.END

    # === 1. –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ ===
    original_dates, scheduled_dates = get_postpone_dates_by_tg_id(tg_id)

    overdue_rows = []
    for scooter, row in all_unpaid:
        payment_date = row[1]

        # –ï—Å–ª–∏ –ø–ª–∞—Ç—ë–∂ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—É—é –¥–∞—Ç—É
        if payment_date in original_dates:
            continue  

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É
        if payment_date < today:
            overdue_rows.append((scooter, row))

    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ –¥–∞—Ç—ã –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ (scheduled_dates)
    for scooter in scooters:
        for sched_date in scheduled_dates:
            # –ø–æ–ª—É—á–∞–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–π –ø–ª–∞—Ç—ë–∂ –ø–æ –¥–∞—Ç–µ –ø–µ—Ä–µ–Ω–æ—Å–∞
            unpaid_sched = get_postpone_for_date(scooter["id"], sched_date)
            if unpaid_sched and sched_date < today:
                # –∏—â–µ–º –ø–ª–∞—Ç–µ–∂ —Å —ç—Ç–æ–π –¥–∞—Ç–æ–π –≤ all_unpaid
                for sc, row in all_unpaid:
                    if sc["id"] == scooter["id"] and row[1] == sched_date:
                        overdue_rows.append((sc, row))

    # –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ —Ü–∏–∫–ª–æ–º –¥–ª—è scooter –∏ row                   
    unique = []
    seen = set()
    for scooter, row in overdue_rows:
        key = (scooter["id"], row[1])
        if key not in seen:
            seen.add(key)
            unique.append((scooter, row))

    overdue_rows = unique

    # === –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–∫–∏ ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if overdue_rows:
        total_amount = 0
        payment_db_ids = []
        text = "‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:\n\n"

        for scooter, row in overdue_rows:
            base_amount = row[2] + row[3]
            fine = 1500
            amount = base_amount + fine
            total_amount += amount
            payment_db_ids.append(row[0])
            text += (
                f"üõµ <b>{scooter['model']}</b>\n"
                f"üìÖ –ù–µ–¥–µ–ª—è: {row[1].strftime('%d.%m.%Y')}\n"
                f"üí∞ –¢–∞—Ä–∏—Ñ: {row[2]}‚ÇΩ + –®—Ç—Ä–∞—Ñ: {fine}‚ÇΩ = <b>{amount}‚ÇΩ</b>\n\n"
            )

        text += (
            f"üí≥ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_amount}‚ÇΩ</b>\n\n"
            f"üìå <b>–í–ê–ñ–ù–û:</b>\n"
            f"1Ô∏è‚É£ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –Ω–æ–º–µ—Ä <b>+79000000000</b>\n"
            f"2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞</b> –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É: <b>@ibilsh</b>\n"
            f"3Ô∏è‚É£ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ <b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –Ω–∏–∂–µ</b>\n\n"
            f"‚ö†Ô∏è –ë–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä—ë—Ö —à–∞–≥–æ–≤ –ø–ª–∞—Ç—ë–∂ <b>–Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω</b>."
        )

        key = str(uuid.uuid4())[:8]
        payment_confirm_registry[key] = payment_db_ids

        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm_payment:{key}")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        await cleanup_lk_messages(update, context, new_text=text, reply_markup=reply_markup)
        return ConversationHandler.END

    # === 2. –ü–µ—Ä–µ–Ω–æ—Å—ã ===
    if active_postpones:
        total_amount = 0
        payment_db_ids = []
        text = f"üîÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–Ω–æ—Å—ã –ø–æ {len(active_postpones)} —Å–∫—É—Ç–µ—Ä–∞–º:\n\n"

        for entry in active_postpones:
            scooter = entry["scooter"]
            payment = entry["payment"]
            postpone = entry["postpone"]

            amount = scooter["weekly_price"] * 2 + postpone["fine_amount"]
            total_amount += amount

            original_payment_id = payment[0]
            scheduled_payment_id = get_payment_id_by_date(scooter["id"], postpone["scheduled_date"])
            payment_db_ids.append(original_payment_id)
            if scheduled_payment_id:
                payment_db_ids.append(scheduled_payment_id)

            model = scooter["model"]
            orig = postpone["original_date"].strftime('%d.%m')
            sched = postpone["scheduled_date"].strftime('%d.%m')
            fine = postpone["fine_amount"]
            fine_text = f"‚ö†Ô∏è –°–æ —à—Ç—Ä–∞—Ñ–æ–º +{fine}‚ÇΩ" if fine else "‚úÖ –ë–µ–∑ —à—Ç—Ä–∞—Ñ–∞"

            text += (
                f"üõµ <b>–ú–æ–¥–µ–ª—å: {model}</b>\n"
                f"üìÖ –ü–µ—Ä–µ–Ω–æ—Å: —Å <b>{orig}</b> –Ω–∞ <b>{sched}</b>\n"
                f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{amount}‚ÇΩ</b>\n"
                f"{fine_text}\n\n"
            )

        text += (
            f"üí≥ <b>–û–±—â–∞—è —Å—É–º–º–∞: {total_amount}‚ÇΩ</b>\n\n"
            f"üìå <b>–í–ê–ñ–ù–û:</b>\n"
            f"1Ô∏è‚É£ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –Ω–æ–º–µ—Ä <b>+79000000000</b>\n"
            f"2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞</b> –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É: <b>@ibilsh</b>\n"
            f"3Ô∏è‚É£ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ <b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –Ω–∏–∂–µ</b>\n\n"
            f"‚ö†Ô∏è –ë–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä—ë—Ö —à–∞–≥–æ–≤ –ø–ª–∞—Ç—ë–∂ <b>–Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω</b>."
        )

        key = str(uuid.uuid4())[:8]
        payment_confirm_registry[key] = {
        "payment_ids": payment_db_ids,
        "postpones": active_postpones  
}

        reply_markup = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm_payment:{key}")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        await cleanup_lk_messages(update, context, new_text=text, reply_markup=reply_markup)
        return ConversationHandler.END

    # === 3. –ò–Ω–∞—á–µ ‚Äî –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤—ã–±–æ—Ä –Ω–µ–¥–µ–ª—å
    context.user_data["all_unpaid"] = [row for _, row in all_unpaid]
    grouped = defaultdict(list)
    for scooter, row in all_unpaid:
        grouped[scooter["id"]].append(row)

    max_weeks = min(len(payments) for payments in grouped.values())
    if max_weeks == 0:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π –æ–ø–ª–∞—Ç—ã.")
        return ConversationHandler.END

    await query.message.reply_text(
        f"–í–≤–µ–¥–∏—Ç–µ –Ω–∞ —Å–∫–æ–ª—å–∫–æ –Ω–µ–¥–µ–ª—å —Ö–æ—Ç–∏—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å (–º–∞–∫—Å–∏–º—É–º {max_weeks}):\n\n"
        "–ï—Å–ª–∏ –≤—ã –æ—à–∏–±–ª–∏—Å—å –∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ —Å–µ–π—á–∞—Å –æ–ø–ª–∞—á–∏–≤–∞—Ç—å ‚Äî –Ω–∞–∂–º–∏—Ç–µ /exit."
    )
    return ASK_WEEKS_NEW_ALL


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–¥–µ–ª—å

async def confirm_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("confirm_payment:"):
        await query.edit_message_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö.")
        return

    key = data.split(":", 1)[1].strip()
    payment_info = payment_confirm_registry.get(key)

    if not payment_info:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return

    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∏ –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç—ã payment_confirm_registry
    if isinstance(payment_info, dict):
        payment_ids = payment_info.get("payment_ids", [])
    else:
        payment_ids = payment_info

    # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–∏ –¥–ª—è –æ–±—ã—á–Ω–æ–π –æ–ø–ª–∞—Ç—ã (amount > 0)
    payment_ids_to_mark = []
    for pid in payment_ids:
        with get_connection() as conn:
            with conn.cursor() as cur:
                cur.execute("SELECT amount FROM payments WHERE id = %s", (pid,))
                amt = cur.fetchone()[0]
                if amt > 0:
                    payment_ids_to_mark.append(pid)

    # ‚úÖ –û—Ç–º–µ—á–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –∫–∞–∫ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ
    mark_payments_as_paid(payment_ids_to_mark)

    # ‚úÖ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
    for pid in payment_ids_to_mark:
        with get_connection() as conn:
            with conn.cursor() as cur:
                # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
                cur.execute("""
                    SELECT scooter_id, payment_date FROM payments WHERE id = %s
                """, (pid,))
                row = cur.fetchone()
                if not row:
                    continue
                scooter_id, payment_date = row

                # 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–µ—Ä–µ–Ω–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                postpone_row = get_postpone_for_date(scooter_id, payment_date)
                if postpone_row:
                    original_date = postpone_row["original_date"]
                    scheduled_date = postpone_row["scheduled_date"]     

                    # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å
                    close_postpone(scooter_id, scheduled_date)

                    # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–ª–∞—Ç—ë–∂ (original_date): —Å—Ç–∞–≤–∏–º is_paid=TRUE –∏ amount=0
                    cur.execute("""
                        UPDATE payments
                        SET is_paid = TRUE, paid_at = NOW(), amount = 0
                        WHERE scooter_id = %s AND payment_date = %s
                    """, (scooter_id, original_date))

                    print(f"[DEBUG] –ó–∞–∫—Ä—ã—Ç –ø–µ—Ä–µ–Ω–æ—Å –¥–ª—è —Å–∫—É—Ç–µ—Ä–∞ {scooter_id}. "
                          f"original_date={original_date}, scheduled_date={scheduled_date}, "
                          f"rows affected={cur.rowcount}")

            conn.commit()

    # ‚úÖ –£–¥–∞–ª—è–µ–º –∫–ª—é—á –∏–∑ —Ä–µ–µ—Å—Ç—Ä–∞ (–∑–∞–≤–µ—Ä—à–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É)
    payment_confirm_registry.pop(key, None)

    await query.edit_message_text("‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –°–ø–∞—Å–∏–±–æ!")



async def handle_weeks_count_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if not text.isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return ASK_WEEKS_NEW_ALL

    weeks_requested = int(text)
    all_unpaid = context.user_data.get("all_unpaid", [])

    if not all_unpaid:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–ª–∞—Ç–µ–∂–∏.")
        return ConversationHandler.END

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ —Å–∫—É—Ç–µ—Ä—É
    grouped = defaultdict(list)
    for row in all_unpaid:
        scooter_id = row[4]
        grouped[scooter_id].append(row)

    # –£—á–∏—Ç—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã
    scheduled_dates = set()
    original_dates = set()
    for scooter_id in grouped:
        for postpone in get_active_postpones(scooter_id):
            if isinstance(postpone, dict):
                scheduled_dates.add(postpone["scheduled_date"])
                original_dates.add(postpone["original_date"])
            elif isinstance(postpone, tuple):
                scheduled_dates.add(postpone[1])
                original_dates.add(postpone[0])

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    filtered_grouped = defaultdict(list)
    for scooter_id, payments in grouped.items():
        for row in payments:
            date = row[1]
            if date in scheduled_dates or date in original_dates:
                continue
            filtered_grouped[scooter_id].append(row)

    max_weeks = min(len(payments) for payments in filtered_grouped.values())
    if weeks_requested < 1 or weeks_requested > max_weeks:
        await update.message.reply_text(f"–î–æ—Å—Ç—É–ø–Ω–æ –æ—Ç 1 –¥–æ {max_weeks} –Ω–µ–¥–µ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return ASK_WEEKS_NEW_ALL

    selected = []
    for i in range(weeks_requested):
        for payments in filtered_grouped.values():
            if i < len(payments):
                selected.append(payments[i])

    now = datetime.now().date()
    overdue_count = sum(1 for row in selected if row[1] < now)
    fine = overdue_count * 1500

    dates_text = "\n".join(f"üìÖ {row[1].strftime('%d.%m.%Y')}" for row in selected)
    total_amount = sum(row[2] + row[3] for row in selected) + fine
    payment_db_ids = [row[0] for row in selected]

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–ø–ª–∞—Ç—É —Å –∫–ª—é—á–æ–º
    key = str(uuid.uuid4())[:8]
    payment_confirm_registry[key] = payment_db_ids

    if overdue_count > 0:
        await update.message.reply_text(
            f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ <b>{overdue_count}</b> –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π.\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω —à—Ç—Ä–∞—Ñ: <b>{fine}‚ÇΩ</b>.",
            parse_mode="HTML"
        )

    await update.message.reply_text(
        f"üì¶ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∫—É—Ç–µ—Ä–æ–≤: <b>{len(filtered_grouped)}</b>\n"
        f"üìÖ –í—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥: <b>{weeks_requested} –Ω–µ–¥.</b>\n"
        f"üßæ –ü–ª–∞—Ç–µ–∂–µ–π –∫ –æ–ø–ª–∞—Ç–µ: <b>{len(selected)}</b>\n"
        f"üí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: <b>{total_amount}‚ÇΩ</b>\n\n"
        f"<b>–ù–µ–¥–µ–ª–∏ –∫ –æ–ø–ª–∞—Ç–µ:</b>\n{dates_text}\n\n"
        f"üìå <b>–í–ê–ñ–ù–û:</b>\n"
        f"1Ô∏è‚É£ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –Ω–æ–º–µ—Ä <b>+79000000000</b>\n"
        f"2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞</b> –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–∫–∞–∑—á–∏–∫—É: <b>@ibilsh</b>\n"
        f"3Ô∏è‚É£ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ <b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –Ω–∏–∂–µ</b>\n\n"
        f"‚ö†Ô∏è –ë–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä—ë—Ö —à–∞–≥–æ–≤ –ø–ª–∞—Ç—ë–∂ <b>–Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω</b>.",
        parse_mode="HTML",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"confirm_payment:{key}")]
        ])
    )
    return ConversationHandler.END




async def handle_repair_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await cleanup_lk_messages(update, context)

    tg_id = update.effective_user.id
    repairs = get_all_done_repairs(tg_id)

    if not repairs:
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_silent")]
        ])
        msg = await update.callback_query.message.reply_text("üõ† –ò—Å—Ç–æ—Ä–∏—è —Ä–µ–º–æ–Ω—Ç–æ–≤ –ø—É—Å—Ç–∞.", reply_markup=keyboard)
        context.user_data.setdefault("lk_message_ids", []).append(msg.message_id)
        return

    for created_at, problem, photo in repairs:
        date_str = created_at.strftime("%d.%m.%Y")
        caption = (
            f"üìÖ <b>{date_str}</b>\n"
            f"‚öô {problem}\n\n"
            f"‚ùì –û—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–µ–º–æ–Ω—Ç—É? –ù–∞–ø–∏—à–∏—Ç–µ @ibilsh"
        )

        if photo:
            msg = await context.bot.send_photo(
                chat_id=tg_id,
                photo=photo,
                caption=caption,
                parse_mode="HTML"
            )
        else:
            msg = await context.bot.send_message(
                chat_id=tg_id,
                text=caption,
                parse_mode="HTML"
            )
        
        context.user_data.setdefault("lk_message_ids", []).append(msg.message_id)

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_silent")]
    ])
    msg_back = await update.callback_query.message.reply_text("‚Ü©Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)
    context.user_data.setdefault("lk_message_ids", []).append(msg_back.message_id)

    

async def postpone_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cleanup_client_messages(update, context)

    tg_id = update.effective_user.id
    client = get_client_by_tg_id(tg_id)
    message = update.message or update.callback_query.message

    if not client:
        msg = await message.reply_text("‚ùó –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
        context.user_data.setdefault("client_message_ids", []).append(msg.message_id)
        return

    scooters = get_scooters_by_client(client["id"])
    if not scooters:
        msg = await message.reply_text("‚ùó –£ –≤–∞—Å –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–∫—É—Ç–µ—Ä–∞.")
        context.user_data.setdefault("client_message_ids", []).append(msg.message_id)
        return

    keyboard = []
    texts = []

    for scooter in scooters:
        payments = get_unpaid_payments_by_scooter(scooter["id"])
        next_payment = payments[0] if payments else None

        if not next_payment:
            continue

        original_date = next_payment[1]
        weekly_price = next_payment[2]

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å
        active_postpones = get_active_postpones(scooter["id"])
        if active_postpones:
            scheduled_date = active_postpones[0][1]
            fine = active_postpones[0][3]
            amount = weekly_price * 2 + fine
            text = (
                f"‚ö†Ô∏è <b>–í—ã —É–∂–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ø–µ—Ä–µ–Ω–æ—Å</b>\n\n"
                f"üõµ –ú–æ–¥–µ–ª—å: <b>{scooter['model']}</b>\n"
                f"üî¢ VIN: <code>{scooter['vin']}</code>\n"
                f"üìÜ –ù–æ–≤—ã–π —Å—Ä–æ–∫ –æ–ø–ª–∞—Ç—ã: <b>{scheduled_date.strftime('%d.%m.%Y')}</b>\n"
                f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{amount}‚ÇΩ</b>\n"
                f"{'‚ö†Ô∏è +1000‚ÇΩ —à—Ç—Ä–∞—Ñ' if fine else '‚úÖ –ë–µ–∑ —à—Ç—Ä–∞—Ñ–∞'}\n\n"
                f"–ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ."
            )
            texts.append(text)
            continue

        # –†–∞—Å—á—ë—Ç –Ω–æ–≤–æ–π –¥–∞—Ç—ã: —Å–ª–µ–¥—É—é—â–∞—è –ø—è—Ç–Ω–∏—Ü–∞
        scheduled_date = get_next_fridays(original_date + timedelta(days=1), 1)[0]

        # –û–ø—Ä–µ–¥–µ–ª–∏–º —à—Ç—Ä–∞—Ñ
        weekday = date.today().weekday()
        if weekday == 4:   # 4 = –ø—è—Ç–Ω–∏—Ü–∞
            fine = 1500
        elif weekday in (5, 6, 0, 1):       # —Å—É–±–±–æ—Ç–∞-–≤—Ç–æ—Ä–Ω–∏–∫
            fine = 0
        else:                               # —Å—Ä–µ–¥–∞-—á–µ—Ç–≤–µ—Ä–≥
            fine = 1000

        new_amount = weekly_price * 2 + fine
        if fine == 0:
            fine_text = "‚úÖ –ë–µ–∑ —à—Ç—Ä–∞—Ñ–∞"
        elif fine == 1000:
            fine_text = "‚ö†Ô∏è +1000‚ÇΩ —à—Ç—Ä–∞—Ñ"
        elif fine == 1500:
            fine_text = "‚ö†Ô∏è +1500‚ÇΩ —à—Ç—Ä–∞—Ñ (–ø–µ—Ä–µ–Ω–æ—Å –Ω–∞ –ø—è—Ç–Ω–∏—Ü—É)"
        text = (
            f"‚ö†Ô∏è <b>–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
            f"üõµ –ú–æ–¥–µ–ª—å: <b>{scooter['model']}</b>\n"
            f"üî¢ VIN: <code>{scooter['vin']}</code>\n"
            f"üìÜ –¢–µ–∫—É—â–∏–π —Å—Ä–æ–∫: <b>{original_date.strftime('%d.%m.%Y')}</b> (–æ–±–Ω—É–ª—è–µ—Ç—Å—è)\n"
            f"üìÜ –ù–æ–≤—ã–π —Å—Ä–æ–∫: <b>{scheduled_date.strftime('%d.%m.%Y')}</b>\n"
            f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{new_amount}‚ÇΩ</b>\n"
            f"{fine_text}\n\n"
            f"–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É üëá"
        )
        texts.append(text)

        callback_data = f"confirm_postpone:{scooter['id']}"

        context.user_data[f"postpone:{scooter['id']}"] = {
        "original_date": original_date,
        "scheduled_date": scheduled_date,
        "fine": fine
        }

        keyboard.append([
            InlineKeyboardButton(f"üõµ {scooter['model']}", callback_data=callback_data)
        ])

    keyboard.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")
    ])

    full_text = "\n\n".join(texts) if texts else "–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞."
    await cleanup_lk_messages(update, context, new_text=full_text, reply_markup=InlineKeyboardMarkup(keyboard))


async def confirm_postpone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data.split(":")

    scooter_id = int(data[1])
    info = context.user_data.get(f"postpone:{scooter_id}")

    if not info:
        await query.message.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    original_date = info["original_date"]
    scheduled_date = info["scheduled_date"]
    fine_amount = info["fine"]
    with_fine = fine_amount > 0

    tg_id = query.from_user.id
    client = get_client_by_tg_id(tg_id)
    scooter = get_scooter_by_id(scooter_id)

    unpaid = get_unpaid_payments_by_scooter(scooter_id)
    today = date.today()

    if not unpaid:
        msg = await query.message.reply_text("‚úÖ –ù–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏.")
        context.user_data.setdefault("client_message_ids", []).append(msg.message_id)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∏
    if any(p[1] < today for p in unpaid):
        msg = await query.message.reply_text(
            "‚ö†Ô∏è –£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –Ω–µ–¥–µ–ª–∏.\n"
            "–°–Ω–∞—á–∞–ª–∞ –æ–ø–ª–∞—Ç–∏—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å."
        )
        context.user_data.setdefault("client_message_ids", []).append(msg.message_id)
        return

    if has_active_postpone(scooter_id):
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
        ])
        msg = await query.message.reply_text(
            "‚ö†Ô∏è –ü–µ—Ä–µ–Ω–æ—Å —É–∂–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω –ø–æ —ç—Ç–æ–º—É —Å–∫—É—Ç–µ—Ä—É –∏ –µ—â—ë –Ω–µ –∑–∞–∫—Ä—ã—Ç.\n"
            "–ü–æ–≤—Ç–æ—Ä–Ω—ã–π –ø–µ—Ä–µ–Ω–æ—Å –≤–æ–∑–º–æ–∂–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –¥–≤—É—Ö –Ω–µ–¥–µ–ª—å ‚Äî —Ç–µ–∫—É—â–µ–π –∏ –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω–Ω–æ–π.",
            reply_markup=keyboard
        )
        context.user_data.setdefault("client_message_ids", []).append(msg.message_id)
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å
    save_postpone_request(
        tg_id=tg_id,
        scooter_id=scooter_id,
        original_date=original_date,
        scheduled_date=scheduled_date,
        with_fine=with_fine,
        fine_amount=fine_amount
    )

    weekly_price = scooter["weekly_price"]
    new_amount = weekly_price * 2 + fine_amount

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É –ø–æ –Ω–æ–≤–æ–π –¥–∞—Ç–µ, –µ—Å–ª–∏ –ø–ª–∞—Ç—ë–∂ —É–∂–µ –µ—Å—Ç—å
    try:
        update_payment_amount(scooter_id, scheduled_date, new_amount)
    except:
        # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–∞ –Ω–µ—Ç ‚Äî —Å–æ–∑–¥–∞—ë–º
        save_payment_schedule_by_scooter(scooter_id, [scheduled_date], new_amount)

    # –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    log_payment_postpone(
        tg_id=tg_id,
        full_name=client["full_name"],
        phone=client["phone"],
        city=client["city"],
        original_date=original_date,
        scheduled_date=scheduled_date,
        with_fine=with_fine,
        fine_amount=fine_amount,
        vin=scooter["vin"]
    )

    await notify_admin_about_postpone(
        tg_id=tg_id,
        full_name=client["full_name"],
        original_date=original_date,
        scheduled_date=scheduled_date,
        with_fine=with_fine,
        fine_amount=fine_amount,
        vin=scooter["vin"]
    )

    text = (
        f"üîÅ –ü–µ—Ä–µ–Ω–æ—Å –ø–ª–∞—Ç–µ–∂–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω.\n"
        f"üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞: {scheduled_date.strftime('%d.%m.%Y')}\n"
        f"üí∏ {'+{}‚ÇΩ —à—Ç—Ä–∞—Ñ'.format(fine_amount) if with_fine else '–ë–µ–∑ —à—Ç—Ä–∞—Ñ–∞'}"
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ])

    if "main_message_id" in context.user_data:
        await cleanup_lk_messages(update, context, new_text=text, reply_markup=keyboard)
    else:
        msg = await query.message.reply_text(text, parse_mode="HTML", reply_markup=keyboard)
        context.user_data["main_message_id"] = msg.message_id

async def cancel_postpone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    await cleanup_lk_messages(update, context)
    await personal_account_entry(update, context)
    return ConversationHandler.END


conv_handler_pay_all = ConversationHandler(
    entry_points=[CallbackQueryHandler(handle_pay_all_entry, pattern="^pay_all$")],
    states={
        ASK_WEEKS_NEW_ALL: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_weeks_count_all)],
    },
    fallbacks=[cancel_fallback, payment_back_fallback]
)

silent_back_handler = CallbackQueryHandler(handle_back_silent, pattern="^back_silent$")
postpone_conv_handler = CallbackQueryHandler(postpone_entry, pattern="^postpone$")
confirm_postpone_handler = CallbackQueryHandler(confirm_postpone, pattern="^confirm_postpone:\d+$")
confirm_payment_handler = CallbackQueryHandler(confirm_payment_callback, pattern="^confirm_payment:")
