from telegram import InlineKeyboardMarkup, InlineKeyboardButton, Update
from telegram.ext import ContextTypes, CallbackQueryHandler
from database.repairs import get_repair_by_id, mark_repair_as_processed
from services.notifier import send_repair_to_master
from handlers.keyboard_utils import get_admin_inline_keyboard


MASTERS = {
    856550800: "–ê–Ω–¥—Ä–µ–π" 
    }



async def cleanup_assign_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    ids = context.user_data.get("assign_message_ids", [])
    for msg_id in ids:
        try:
            await update.effective_chat.delete_message(msg_id)
        except:
            pass
    context.user_data["assign_message_ids"] = []



async def back_to_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cleanup_assign_messages(update, context)
    query = update.callback_query
    await query.answer()
    await query.message.reply_text("üîß <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞—è–≤–∫–∏, –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤, "
        "–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∞—Ä–µ–Ω–¥—É –∏ —Ä–µ–º–æ–Ω—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_admin_inline_keyboard())


async def assign_repair_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await cleanup_assign_messages(update, context)

    repair_id = int(query.data.split(":")[1])
    context.user_data["repair_id"] = repair_id
    repair = get_repair_by_id(repair_id)
    context.user_data["current_repair"] = repair

    await query.message.reply_text(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, –ø—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –∑–∞—è–≤–∫–µ –æ—Ç <b>{repair['name']}</b> –∏–∑ <b>{repair['city']}</b>",
        parse_mode="HTML"
    )

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üë®‚Äçüîß @{username}", callback_data=f"select_master:{tg_id}")]
        for tg_id, username in MASTERS.items()
    ])

    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Å—Ç–µ—Ä–∞:", reply_markup=keyboard)


async def handle_master_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    await cleanup_assign_messages(update, context)

    master_id = int(query.data.split(":")[1])
    repair = context.user_data.get("current_repair")

    if not repair:
        await query.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏.")
        return

    try:
        await send_repair_to_master(master_id, repair)
        mark_repair_as_processed(repair["id"])
        keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω–∫—É", callback_data="back_to_admin")]
    ])
        await query.message.reply_text("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞ –º–∞—Å—Ç–µ—Ä—É.", reply_markup=keyboard)
    except Exception as e:
        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–∞—Å—Ç–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—á–∞–ª –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.")
