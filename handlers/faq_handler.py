from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CallbackQueryHandler

from handlers.cancel_handler import universal_cancel_handler

from services.faq_ai_yandex import ask_yandex_gpt

WAITING_FAQ = 1




cancel_fallback = MessageHandler(
    filters.Regex("^(‚¨ÖÔ∏è –ù–∞–∑–∞–¥|–Ω–∞–∑–∞–¥|–æ—Ç–º–µ–Ω–∞|/cancel|/start|/menu|/admin)$"),
    universal_cancel_handler
)


# ‚è± –í—Ö–æ–¥ –≤ —Ä–µ–∂–∏–º FAQ
async def start_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()
    context.user_data["in_faq"] = True

    text = (
        "üí¨ –ü—Ä–∏–≤–µ—Ç –µ—â–µ —Ä–∞–∑! –ö–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ Ibilsh –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ–ø–∏—Å–∞–ª–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –≤ –±–ª–æ–∫ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –µ—Å–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –±—É–¥–µ—Ç —Å–µ–±—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–µ—Å—Ç–∏ - –æ—Å—Ç–∞–≤—å—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º @xxxxxxxxxnxxxw\n\n"
        "–ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –Ω–∏–∂–µ, —Å —É–≤–∞–∂–µ–Ω–∏–µ–º Ibilsh."
    )
    
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="faq_back")]]
    message = update.callback_query.message
    sent_msg = await message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    context.user_data["faq_message_id"] = sent_msg.message_id

    return WAITING_FAQ

# ü§ñ –û—Ç–≤–µ—Ç –æ—Ç –ò–ò –∏–ª–∏ –≤—ã—Ö–æ–¥
BLOCKED_TEXTS = ["–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", "–ó–∞–≥—Ä—É–∑–∏—Ç—å –æ–ø–ª–∞—Ç—É", "–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø–ª–∞—Ç—ë–∂", "–ß–∞—Å—Ç—ã–µ –í–æ–ø—Ä–æ—Å—ã"]

async def handle_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ FAQ
    if not context.user_data.get("in_faq"):
        return

    user_text = update.message.text.strip()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã
    if user_text in BLOCKED_TEXTS or user_text.startswith("/"):
        await update.message.reply_text(
            "‚ö†Ô∏è –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ FAQ. –°–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ ¬´/start¬ª –∏–ª–∏ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
        )
        return

    try:
        answer = ask_yandex_gpt(user_text)  # –∏–ª–∏ await, –µ—Å–ª–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è
        await update.message.reply_text(answer)
    except Exception as e:
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"[FAQ ERROR]: {e}")



async def faq_exit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.callback_query.answer()

    faq_msg_id = context.user_data.pop("faq_message_id", None)
    if faq_msg_id:
        try:
            await update.effective_chat.delete_message(faq_msg_id)
        except:
            pass  

    context.user_data["in_faq"] = False

    try:
        await update.callback_query.message.delete()
    except:
        pass  


faq_back_handler = CallbackQueryHandler(faq_exit, pattern="^faq_back$")



faq_conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(start_faq, pattern="^faq$")],
    states={
        WAITING_FAQ: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_faq)],
    },
    fallbacks=[cancel_fallback, faq_back_handler],
)