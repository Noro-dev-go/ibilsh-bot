from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters, CallbackQueryHandler

from services.notifier import notify_admin_about_new_client
from handlers.cancel_handler import universal_cancel_handler
from database.db import get_connection
from database.pending import save_pending_user
from utils.validators import is_valid_name
from handlers.keyboard_utils import get_keyboard

ASK_NAME, ASK_AGE, ASK_CITY, ASK_PHONE, ASK_TARIFF, CONFIRM_ORDER, ASK_SHOW_PRODUCTS = range(7)

cancel_fallback = MessageHandler(
    filters.Regex("^(‚¨ÖÔ∏è –ù–∞–∑–∞–¥|–Ω–∞–∑–∞–¥|–æ—Ç–º–µ–Ω–∞|/cancel|/start|/menu)$"),
    universal_cancel_handler
)

# === –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ ===
async def cleanup_previous_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
   if "start_message_id" in context.user_data:
        try:
            await update.effective_chat.delete_message(context.user_data["start_message_id"])
        except:
           pass
        del context.user_data["start_message_id"]

        if "cleanup_messages" in context.user_data:
            for msg_id in context.user_data["cleanup_messages"]:
                try:
                    await update.effective_chat.delete_message(msg_id)
                except:
                    pass
            context.user_data["cleanup_messages"].clear()
        else:
            context.user_data["cleanup_messages"] = []

def store_message_id(context, message):
    context.user_data.setdefault("cleanup_messages", []).append(message.message_id)


# === –•–µ–Ω–¥–ª–µ—Ä—ã ===
async def entry_point_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    await cleanup_previous_messages(update, context)
    
    context.user_data["start_message_id"] = message.message_id

    msg = await message.reply_text(
        "<b>üìÑ –£ –Ω–∞—Å –¥–ª—è —Ç–µ–±—è –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:</b>\n\n"
        "üîã <b>–ê—Ä–µ–Ω–¥–∞ —Å –æ–¥–Ω–∏–º –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–æ–º</b>: 2000‚ÇΩ –≤ –Ω–µ–¥–µ–ª—é\n"
        "üîã <b>–ê—Ä–µ–Ω–¥–∞ —Å –¥–≤—É–º—è –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞–º–∏</b>: 3000‚ÇΩ –≤ –Ω–µ–¥–µ–ª—é\n"
        "üì¶ <b>–í—ã–∫—É–ø</b>: 3000‚ÇΩ/–Ω–µ–¥. ~50 –Ω–µ–¥–µ–ª—å\n\n"
        "‚ö° <b>–ù–∞–ø–æ–º–∏–Ω–∞–µ–º:</b> –Ω–∏–∫–∞–∫–∏—Ö –∑–∞–ª–æ–≥–æ–≤ –∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç!\n"
        "–ü–µ—Ä–≤–∞—è –æ–ø–ª–∞—Ç–∞ –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ–¥–µ–ª—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è.",
        parse_mode="HTML"
    )
    store_message_id(context, msg)

    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –î–∞", callback_data="show_yes"),
            InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="show_no")
        ]
    ])
    msg2 = await message.reply_text("–•–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞—à –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç?", reply_markup=keyboard)
    store_message_id(context, msg2)
    return ASK_SHOW_PRODUCTS

async def show_products(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await cleanup_previous_messages(update, context)

    if query.data == "show_yes":
        photo_msg = await query.message.reply_photo(
            photo=open("images/syccyba_one_ACB.jpg", "rb"),
            caption=(
                "üõµ <b>Syccoba (—ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥)</b>\n\n"
                "üîã –ê–∫–∫—É–º—É–ª—è—Ç–æ—Ä: 60V, 21Ah\n"
                "‚ö° –°–∫–æ—Ä–æ—Å—Ç—å –¥–æ: 25 –∫–º/—á\n"
                "üöó –ó–∞–ø–∞—Å —Ö–æ–¥–∞ –¥–æ: 70 –∫–º\n"
                "üèç –ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: 240/1000 –í—Ç\n"
                "üõû –ö–æ–ª—ë—Å–∞: 16\" –±–µ—Å–∫–∞–º–µ—Ä–Ω—ã–µ\n"
                "‚è± –í—Ä–µ–º—è –∑–∞—Ä—è–¥–∫–∏: ~7 —á\n"
                "üßç‚Äç‚ôÇÔ∏è –ú–∞–∫—Å. –Ω–∞–≥—Ä—É–∑–∫–∞: 150 –∫–≥\n"
                "üìü –î–∏—Å–ø–ª–µ–π, –∞–º–æ—Ä—Ç–∏–∑–∞—Ü–∏—è, —Å—ä—ë–º–Ω–∞—è –±–∞—Ç–∞—Ä–µ—è, –≥–∏–¥—Ä–æ—Ç–æ—Ä–º–æ–∑–∞\n"
                "üì¶ –†–∞–∑–º–µ—Ä: 170√ó115√ó80 —Å–º, –í–µ—Å: 57.5 –∫–≥"
            ),
            parse_mode="HTML"
        )
        store_message_id(context, photo_msg)

        keyboard = InlineKeyboardMarkup([
            [
                InlineKeyboardButton("‚úÖ –î–∞", callback_data="yes"),
                InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="no")
            ]
        ])
        msg = await query.message.reply_text("–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É?", reply_markup=keyboard)
        context.user_data["start_message_id"] = query.message.message_id
        store_message_id(context, msg)
        return CONFIRM_ORDER
    else:
        await cleanup_previous_messages(update, context)
        await query.message.reply_text("‚ö° –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! –≠—Ç–æ –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Ibilsh ‚Äî —Ç–≤–æ–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –º–∏—Ä–µ —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤!\n\n"
        "üîπ –•–æ—á–µ—à—å –∫ –Ω–∞–º –≤ –∫–æ–º–∞–Ω–¥—É? ‚Äî –û—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É –Ω–∞ —Ç–≤–æ–π –Ω–æ–≤–µ–Ω—å–∫–∏–π —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤!\n"
        "üîπ –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å? ‚Äî –ú–∞—Å—Ç–µ—Ä –±—É–¥–µ—Ç —É —Ç–µ–±—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤!\n"
        "üîπ –£–∂–µ —Å –Ω–∞–º–∏? ‚Äî –ó–∞–≥–ª—è–Ω–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!\n"
        "üîπ –ü–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? ‚Äî –ú—ã —Å–æ–±—Ä–∞–ª–∏ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö!\n\n"
        "üëá –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:", reply_markup=get_keyboard())
        return ConversationHandler.END

async def already_pending(tg_id: int) -> bool:
    with get_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT 1 FROM pending_users WHERE tg_id = %s AND is_processed = FALSE", (tg_id,))
            return cur.fetchone() is not None

async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data["start_message_id"] = query.message.message_id
    await cleanup_previous_messages(update, context)

    tg_id = query.from_user.id
    if await already_pending(tg_id):
        msg = await query.message.reply_text(
            "‚ö†Ô∏è –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏.\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–∂–¥–∏—Ç–µ—Å—å –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
            reply_markup=get_keyboard()
        )
        store_message_id(context, msg)
        return ConversationHandler.END

    if query.data == "yes":
        msg = await query.message.reply_text("üåê –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º. –ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?", reply_markup=ReplyKeyboardRemove())
        store_message_id(context, msg)
        return ASK_NAME
    else:
        msg = await query.message.reply_text("‚ö° –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! –≠—Ç–æ –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Ibilsh ‚Äî —Ç–≤–æ–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –º–∏—Ä–µ —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤!\n\n"
        "üîπ –•–æ—á–µ—à—å –∫ –Ω–∞–º –≤ –∫–æ–º–∞–Ω–¥—É? ‚Äî –û—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É –Ω–∞ —Ç–≤–æ–π –Ω–æ–≤–µ–Ω—å–∫–∏–π —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤!\n"
        "üîπ –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å? ‚Äî –ú–∞—Å—Ç–µ—Ä –±—É–¥–µ—Ç —É —Ç–µ–±—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤!\n"
        "üîπ –£–∂–µ —Å –Ω–∞–º–∏? ‚Äî –ó–∞–≥–ª—è–Ω–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!\n"
        "üîπ –ü–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? ‚Äî –ú—ã —Å–æ–±—Ä–∞–ª–∏ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö!\n\n"
        "üëá –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:", reply_markup=get_keyboard())
        context.user_data["start_message_id"] = query.message.message_id
        store_message_id(context, msg)
        return ConversationHandler.END

async def ask_age(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cleanup_previous_messages(update, context)
    name = update.message.text.strip()
    if not is_valid_name(name):
        msg = await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã, –±–µ–∑ –º–∞—Ç–∞).")
        store_message_id(context, msg)
        return ASK_NAME

    context.user_data["name"] = name
    msg = await update.message.reply_text("üåê –°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?")
    store_message_id(context, msg)
    return ASK_AGE

async def ask_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cleanup_previous_messages(update, context)
    age = update.message.text.strip()
    if not age.isdigit() or not (18 <= int(age) <= 65):
        msg = await update.message.reply_text("‚ùó –ú—ã –Ω–µ –º–æ–∂–µ–º –≤—ã–¥–∞—Ç—å –ø–æ–¥ –∞—Ä–µ–Ω–¥—É —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥ –ª–∏—Ü–∞–º –º–ª–∞–¥—à–µ 18-—Ç–∏ –ª–µ—Ç.")
        store_message_id(context, msg)
        return ASK_AGE

    context.user_data["age"] = age
    msg = await update.message.reply_text("üìç –í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    store_message_id(context, msg)
    return ASK_CITY

async def ask_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cleanup_previous_messages(update, context)
    context.user_data["city"] = update.message.text.strip()
    msg = await update.message.reply_text("üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    store_message_id(context, msg)
    return ASK_PHONE

async def ask_tariff(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cleanup_previous_messages(update, context)
    phone = update.message.text.strip()
    context.user_data["phone"] = phone
    if not phone.isdigit() or len(phone) != 11:
        msg = await update.message.reply_text("‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ 11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞—è —Å 7:")
        store_message_id(context, msg)
        return ASK_PHONE

    keyboard = ReplyKeyboardMarkup([
        [KeyboardButton("1 –ê–ö–ë ‚Äî 2000‚ÇΩ")],
        [KeyboardButton("2 –ê–ö–ë ‚Äî 3000‚ÇΩ")],
        [KeyboardButton("–í—ã–∫—É–ø ‚Äî 3000‚ÇΩ / ~50 –Ω–µ–¥–µ–ª—å")]
    ], resize_keyboard=True)

    msg = await update.message.reply_text("üíº –ö–∞–∫–æ–π —Ç–∞—Ä–∏—Ñ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?", reply_markup=keyboard)
    store_message_id(context, msg)
    return ASK_TARIFF


async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cleanup_previous_messages(update, context)

    context.user_data["preferred_tariff"] = update.message.text.strip()

    # ‚úÖ –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å—Ä–∞–∑—É, –Ω–µ –¥–æ–∂–∏–¥–∞—è—Å—å –∫–æ–Ω—Ü–∞ FSM
    await update.message.reply_text("–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã, —Å–ø–∞—Å–∏–±–æ! –û–∂–∏–¥–∞–π—Ç–µ, –º—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.", reply_markup=ReplyKeyboardRemove())

    tg_user = update.effective_user
    context.user_data["username"] = f"@{tg_user.username}" if tg_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
    context.user_data["tg_id"] = tg_user.id

    data = context.user_data
    save_pending_user(data)

    try:
        await notify_admin_about_new_client(data)
    except Exception as e:
        print(f"[ERROR] –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {e}")

    await update.message.reply_text("üîô –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_keyboard())
    return ConversationHandler.END


register_conv_handler = ConversationHandler(
    entry_points=[CallbackQueryHandler(entry_point_button, pattern="^rent$")],
    states={
        ASK_SHOW_PRODUCTS: [CallbackQueryHandler(show_products)],
        CONFIRM_ORDER: [CallbackQueryHandler(confirm_order)],
        ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_age)],
        ASK_AGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_city)],
        ASK_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_phone)],
        ASK_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_tariff)],
        ASK_TARIFF: [MessageHandler(filters.TEXT & ~filters.COMMAND, finish)],
       
    },
    fallbacks=[cancel_fallback]
)
