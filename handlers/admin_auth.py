# admin_auth.py

from os import getenv

from telegram import Bot, Update
from telegram.ext import ContextTypes

from database.admins import add_admin

from database.admin_security import (
    get_security_state, set_lock, clear_lock_and_attempts,
    increment_attempt, is_locked, get_last_attempt_at
)

from utils.cleanup import cleanup_admin_messages

from datetime import datetime, timedelta, timezone

from handlers.keyboard_utils import get_admin_inline_keyboard
from handlers.register_client import cleanup_previous_messages



NOTIFIER_BOT = Bot(token=getenv("NOTIFIER_TOKEN"))
ADMIN_ALERT_TG_ID = int(getenv("OWNER_TG_ID"))


MAX_ATTEMPTS = int(getenv("ADMIN_MAX_ATTEMPTS", 3))
LOCK_MINUTES = int(getenv("ADMIN_LOCK_MINUTES", 480))
RATE_LIMIT_SECONDS = int(getenv("ADMIN_RATE_LIMIT_SECONDS", 2))


def _remain_text(dt: datetime) -> str:
    now = datetime.now(timezone.utc)
    sec = max(int((dt - now).total_seconds()), 0)
    m, s = divmod(sec, 60)
    return f"{m} –º–∏–Ω {s} —Å–µ–∫" if m else f"{s} —Å–µ–∫"



async def admin_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await cleanup_previous_messages(update, context)

    user = update.effective_user
    locked_until = is_locked(user.id)
    if locked_until and datetime.now(timezone.utc) < locked_until:
        await update.effective_chat.send_message(
            f"‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {_remain_text(locked_until)}."
        )
        return

    if context.user_data.get("admin_authenticated"):
        return await show_admin_panel(update, context)

    context.user_data["awaiting_admin_pin"] = True
    await update.effective_chat.send_message("üîê –í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:")



async def check_admin_pin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_admin_pin"):
        return

    user = update.effective_user

    # 1) –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    locked_until = is_locked(user.id)
    if locked_until and datetime.now(timezone.utc) < locked_until:
        await update.message.reply_text(f"‚õî –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {_remain_text(locked_until)}.")
        context.user_data.pop("awaiting_admin_pin", None)
        return

    # 2) –ê–Ω—Ç–∏—Ñ–ª—É–¥ (—á–∞—Å—Ç–æ—Ç–∞)
    last_at = get_last_attempt_at(user.id)
    if last_at and (datetime.now(timezone.utc) - last_at).total_seconds() < RATE_LIMIT_SECONDS:
        await update.message.reply_text("‚è≥ –°–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    entered_pin = update.message.text.strip()
    correct_pin = getenv("ADMIN_PIN")

    if entered_pin == correct_pin:
        add_admin(user.id, user.username, user.full_name)
        context.user_data["admin_authenticated"] = True
        context.user_data.pop("awaiting_admin_pin", None)
        clear_lock_and_attempts(user.id)
        await update.message.reply_text("‚úÖ PIN –≤–µ—Ä–Ω—ã–π, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.")
        return await show_admin_panel(update, context)

    # –ù–µ–≤–µ—Ä–Ω–æ ‚Äî –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç –≤ –ë–î
    attempts = increment_attempt(user.id)

    if attempts >= MAX_ATTEMPTS:
        lock_until = set_lock(user.id, LOCK_MINUTES)
        alert_text = (
            f"üö® <b>{MAX_ATTEMPTS} –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É!</b>\n\n"
            f"üë§ {user.full_name} | @{user.username or '‚Äî'}\n"
            f"üÜî <code>{user.id}</code>\n"
            f"‚è± –ë–ª–æ–∫ –¥–æ: <code>{lock_until.isoformat(timespec='seconds')}</code>"
        )
        await NOTIFIER_BOT.send_message(ADMIN_ALERT_TG_ID, alert_text, parse_mode="HTML")
        context.user_data.pop("awaiting_admin_pin", None)
        await update.message.reply_text(
            f"‚õî –ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ –ø–æ–ø—ã—Ç–æ–∫. –î–æ—Å—Ç—É–ø –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {_remain_text(lock_until)}."
        )
        return

    left = MAX_ATTEMPTS - attempts
    await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π PIN. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {left}")


async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop("came_from_search", None)
    context.user_data.pop("client_id", None)
    await cleanup_admin_messages(update, context)

    text = (
        "üîß <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞—è–≤–∫–∏, –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤, "
        "–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∞—Ä–µ–Ω–¥—É –∏ —Ä–µ–º–æ–Ω—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    msg = await update.effective_chat.send_message(
        text,
        reply_markup=get_admin_inline_keyboard(),
        parse_mode="HTML"
    )

    context.user_data.setdefault("admin_message_ids", []).append(msg.message_id)
