# admin_auth.py

from os import getenv

from telegram import Bot, Update
from telegram.ext import ContextTypes

from database.admins import is_admin, add_admin
from utils.cleanup import cleanup_admin_messages

from handlers.keyboard_utils import get_admin_inline_keyboard
from handlers.register_client import cleanup_previous_messages

NOTIFIER_BOT = Bot(token=getenv("NOTIFIER_TOKEN"))
ADMIN_ALERT_TG_ID = int(getenv("OWNER_TG_ID"))

async def admin_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    await cleanup_previous_messages(update, context)

    # –ï—Å–ª–∏ —É–∂–µ –≤–≤—ë–ª PIN –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏ ‚Äî –ø—Ä–æ—Å—Ç–æ –∑–∞—Ö–æ–¥–∏–º
    if context.user_data.get("admin_authenticated"):
        return await show_admin_panel(update, context)

    # –ò–Ω–∞—á–µ —Å–ø—Ä–∞—à–∏–≤–∞–µ–º PIN
    context.user_data["awaiting_admin_pin"] = True
    context.user_data.setdefault("admin_pin_attempts", 0)
    await update.effective_chat.send_message("üîê –í–≤–µ–¥–∏—Ç–µ PIN-–∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:")


async def check_admin_pin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.user_data.get("awaiting_admin_pin"):
        return

    entered_pin = update.message.text.strip()
    correct_pin = getenv("ADMIN_PIN")

    if entered_pin == correct_pin:
        user = update.effective_user
        add_admin(user.id, user.username, user.full_name)

        # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∞–¥–º–∏–Ω –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –Ω–∞ —Å–µ—Å—Å–∏—é
        context.user_data["admin_authenticated"] = True
        context.user_data["admin_pin_attempts"] = 0
        context.user_data.pop("awaiting_admin_pin", None)

        await update.message.reply_text("‚úÖ PIN –≤–µ—Ä–Ω—ã–π, –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.")
        return await show_admin_panel(update, context)

    # –ù–µ–≤–µ—Ä–Ω—ã–π PIN
    context.user_data["admin_pin_attempts"] += 1
    attempts = context.user_data["admin_pin_attempts"]

    if attempts >= 3:
        user = update.effective_user
        context.user_data.pop("awaiting_admin_pin", None)
        context.user_data["admin_pin_attempts"] = 0

        alert_text = (
            f"üö® <b>3 –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω–∫—É!</b>\n\n"
            f"üë§ {user.full_name} | @{user.username or '‚Äî'}\n"
            f"üÜî <code>{user.id}</code>"
        )
        await NOTIFIER_BOT.send_message(
            chat_id=ADMIN_ALERT_TG_ID,
            text=alert_text,
            parse_mode="HTML"
        )

        await update.message.reply_text("‚õî –í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫. –î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        return

    await update.message.reply_text(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π PIN. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {3 - attempts}")
    
async def show_admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.pop("came_from_search", None)
    context.user_data.pop("client_id", None)
    await cleanup_admin_messages(update, context)

    text = (
        "üîß <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å!</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞—è–≤–∫–∏, –æ—Ñ–æ—Ä–º–ª—è—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤, "
        "–∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å –∞—Ä–µ–Ω–¥—É –∏ —Ä–µ–º–æ–Ω—Ç.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    )

    msg = await update.effective_chat.send_message(
        text,
        reply_markup=get_admin_inline_keyboard(),
        parse_mode="HTML"
    )

    context.user_data.setdefault("admin_message_ids", []).append(msg.message_id)
