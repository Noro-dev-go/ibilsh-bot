import os
import aiofiles
import aiohttp
from dotenv import load_dotenv
from telegram import Bot, InlineKeyboardMarkup, InlineKeyboardButton, InputFile
from telegram.error import TelegramError

from database.users import get_user_info
from database.admins import get_all_admins


load_dotenv()

NOTIFIER_BOT = Bot(token=os.getenv("NOTIFIER_TOKEN"))
MAIN_BOT = Bot(token=os.getenv("BOT_TOKEN"))

async def notify_admin_about_new_repair(data: dict):
    admin_ids = [a["tg_id"] for a in get_all_admins()]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∑–∞—è–≤–∫–∏
    if data.get("is_short"):
        username = f"{data['username']}" if data.get("username") else "–Ω–µ —É–∫–∞–∑–∞–Ω"
        name = data.get("name", "–∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä Ibilsh")
        city = data.get("city", "-")
        phone = data.get("phone", "-")
        vin = data.get("vin") or "-"
        description = data.get("repair_description", "‚Äì")
    
        text = (
        f"üõ† <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –æ—Ç –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞</b>\n\n"
        f"üë§ <b>{name}</b> –∏–∑ {city}\n"
        f"üìû {phone} | {username}\n" 
        f"üîß VIN: {vin}\n"
        f"üìã –ü—Ä–æ–±–ª–µ–º–∞: {description}\n"
        f"üÜî <code>{data['tg_id']}</code>"
    )

    else:
        text = (
            f"üõ† <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç</b>\n\n"
            f"üë§ <b>{data['name']}</b> –∏–∑ {data['city']}\n"
            f"üìû {data['phone']} | {data.get('username', '-')}\n"
            f"üîß VIN: {data.get('vin', '-')}\n"
            f"üìã –ü—Ä–æ–±–ª–µ–º–∞: {data.get('problem', '-')}\n"
            f"üÜî <code>{data['tg_id']}</code>"
        )

    # –†–∞–±–æ—Ç–∞ —Å —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    file_id = data.get("photo_file_id")
    if file_id:
        try:
            tg_file = await MAIN_BOT.get_file(file_id)
            file_url = tg_file.file_path

            async with aiohttp.ClientSession() as session:
                async with session.get(file_url) as response:
                    if response.status == 200:
                        os.makedirs("temp", exist_ok=True)
                        temp_path = os.path.join("temp", f"repair_photo_{data['tg_id']}.jpg")
                        async with aiofiles.open(temp_path, 'wb') as f:
                            await f.write(await response.read())

                        with open(temp_path, 'rb') as photo:
                             for admin_id in admin_ids:
                                await NOTIFIER_BOT.send_photo(
                                    chat_id=admin_id,
                                    photo=InputFile(photo),
                                    caption=text,
                                    parse_mode="HTML"
                            )
                        os.remove(temp_path)
                        return
        except TelegramError as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ —Ñ–æ—Ç–æ:", e)

    # –ë–µ–∑ —Ñ–æ—Ç–æ ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
    for admin_id in admin_ids:
        await NOTIFIER_BOT.send_message(chat_id=admin_id, text=text, parse_mode="HTML")


#–ó–∞—è–≤–∫–∞ –Ω–∞ –≤–µ–ª–æ
async def notify_admin_about_new_client(data: dict):
    admin_ids = [a["tg_id"] for a in get_all_admins()]

    text = (
        f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ, –ø–æ—Å—Ç—É–ø–∏–ª–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Å–∫—É—Ç–µ—Ä</b>\n\n"
        f"üë§ <b>{data['name']}</b>, {data['age']} –ª–µ—Ç\n"
        f"üèôÔ∏è –ì–æ—Ä–æ–¥: {data['city']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üì¶ –¢–∞—Ä–∏—Ñ: {data.get('preferred_tariff', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
        f"üîó Username: {data['username']}\n"
        f"üÜî <code>{data['tg_id']}</code>\n\n"
        f"‚ùó –ü–æ—Å–ª–µ –≤—ã–¥–∞—á–∏ —Å–∫—É—Ç–µ—Ä–∞ –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–º –±–æ—Ç–µ Ibilsh."
    )
    for admin_id in admin_ids:
        await NOTIFIER_BOT.send_message(
            chat_id=admin_id,
            text=text,
            parse_mode="HTML"
        )


# –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –Ω–∞ —Ä–µ–º–æ–Ω—Ç –º–∞—Å—Ç–µ—Ä—É
async def send_repair_to_master(master_id: int, repair: dict):
    text = (
        f"üîß <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç</b>\n\n"
        f"üë§ <b>{repair['name']}</b> –∏–∑ {repair['city']}\n"
        f"üìû {repair['phone']} | {repair['username'] or '‚Äî'}\n"
        f"üõµ VIN: {repair['vin'] or '‚Äî'}\n"
        f"üìã –ü—Ä–æ–±–ª–µ–º–∞: {repair['problem']}\n"
        f"üÜî <code>{repair['tg_id']}</code>"
    )

    keyboard = InlineKeyboardMarkup([[
        InlineKeyboardButton("‚úÖ –†–µ–º–æ–Ω—Ç –∑–∞–≤–µ—Ä—à—ë–Ω", callback_data=f"done_repair:{repair['id']}")
    ]])

    file_id = repair.get("photo_file_id")
    if file_id:
        try:
            os.makedirs("temp", exist_ok=True)
            tg_file = await MAIN_BOT.get_file(file_id)
            file_url = tg_file.file_path
            temp_path = os.path.join("temp", f"repair_to_master_{repair['tg_id']}.jpg")

            async with aiohttp.ClientSession() as session:
                async with session.get(file_url) as response:
                    if response.status == 200:
                        async with aiofiles.open(temp_path, 'wb') as f:
                            await f.write(await response.read())

                        with open(temp_path, 'rb') as photo:
                            await NOTIFIER_BOT.send_photo(
                                chat_id=master_id,
                                photo=InputFile(photo),
                                caption=text,
                                parse_mode="HTML",
                                reply_markup=keyboard
                            )
                        os.remove(temp_path)
                        return
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –º–∞—Å—Ç–µ—Ä—É:", e)

    # –µ—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
    await NOTIFIER_BOT.send_message(
        chat_id=master_id,
        text=text,
        parse_mode="HTML",
        reply_markup=keyboard
    )


async def notify_admin_about_postpone(tg_id: int, full_name: str, original_date, scheduled_date, with_fine: bool, fine_amount: int, vin: str):
    
    admin_ids = [a["tg_id"] for a in get_all_admins()]
    user_info = get_user_info(tg_id)

    fine_text = f"‚ö†Ô∏è –°–æ —à—Ç—Ä–∞—Ñ–æ–º: +{fine_amount}‚ÇΩ" if with_fine else "‚úÖ –ë–µ–∑ —à—Ç—Ä–∞—Ñ–∞"

    text = (
        f"<b>üìÖ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –ø–ª–∞—Ç–µ–∂–∞</b>\n\n"
        f"üë§ {full_name}\n"
        f"üÜî <code>{tg_id}</code>\n"
        f"üõ¥ VIN: <code>{vin}</code>\n"
        f"üìÖ {original_date.strftime('%d.%m.%Y')} ‚Üí {scheduled_date.strftime('%d.%m.%Y')}\n"
        f"{fine_text}"
    )
    for admin_id in admin_ids:

        await NOTIFIER_BOT.send_message(admin_id, text, parse_mode="HTML")
