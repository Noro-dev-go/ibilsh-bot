import os
import asyncio
import nest_asyncio
from dotenv import load_dotenv

from handlers.start import start_handler

from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ConversationHandler,
    filters
)

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from utils.notify_utils import send_payment_notifications_with_button
from utils.bot_commands import setup_bot_commands

# –•–µ–Ω–¥–ª–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
from handlers.start import start
from handlers.faq_handler import start_faq, handle_faq, faq_back_handler, faq_conv_handler
from handlers.personal_account import (
    personal_account_entry, back_to_personal_menu,
    handle_status, handle_repair_history, handle_payments, go_to_main_menu,
    conv_handler_pay_all, postpone_conv_handler, confirm_postpone_handler
)
from handlers.repair_request import (
    repair_conv_handler, short_repair_conv_handler,
    repair_entry_handler, repair_back_handler
)

# –•–µ–Ω–¥–ª–µ—Ä—ã –∞–¥–º–∏–Ω–∫–∏
from handlers.register_client import register_conv_handler
from handlers.admin_register import admin_register_conv_handler
from handlers.admin_edit import start_edit_client, edit_conv_handler
from handlers.admin_panel import register_admin_handlers
from handlers.admin_assign import assign_repair_callback, handle_master_selection
from handlers.keyboard_utils import get_keyboard


load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
#async def start_command(update, context):
   # await update.message.reply_text(
      #  "‚ö° –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, –¥–æ—Ä–æ–≥–æ–π –¥—Ä—É–≥! –≠—Ç–æ –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ Ibilsh ‚Äî —Ç–≤–æ–µ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –≤ –º–∏—Ä–µ —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥–æ–≤!\n\n"
      #  "üîπ –•–æ—á–µ—à—å –∫ –Ω–∞–º –≤ –∫–æ–º–∞–Ω–¥—É? ‚Äî –û—Ñ–æ—Ä–º–∏–º –∑–∞—è–≤–∫—É –Ω–∞ —Ç–≤–æ–π –Ω–æ–≤–µ–Ω—å–∫–∏–π —ç–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ –≤ –ø–∞—Ä—É –∫–ª–∏–∫–æ–≤!\n"
       # "üîπ –ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å? ‚Äî –ú–∞—Å—Ç–µ—Ä –±—É–¥–µ—Ç —É —Ç–µ–±—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤!\n"
      #  "üîπ –£–∂–µ —Å –Ω–∞–º–∏? ‚Äî –ó–∞–≥–ª—è–Ω–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç!\n"
      #  "üîπ –ü–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã? ‚Äî –ú—ã —Å–æ–±—Ä–∞–ª–∏ —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö!\n\n"
      #  "üëá –í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ:",
      #  reply_markup=get_keyboard()
   # )


async def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # --- –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ FSM –∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã ---
    app.add_handler(faq_conv_handler)
    app.add_handler(MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), start))
    app.add_handler(CallbackQueryHandler(personal_account_entry, pattern="^personal_account$"))
    app.add_handler(CallbackQueryHandler(back_to_personal_menu, pattern="^back_to_menu$"))
    app.add_handler(CallbackQueryHandler(go_to_main_menu, pattern="^client_to_main$"))
    app.add_handler(CallbackQueryHandler(start_faq, pattern="^faq$"))
    app.add_handler(faq_back_handler)
    app.add_handler(CallbackQueryHandler(handle_status, pattern="^status$"))
    app.add_handler(CallbackQueryHandler(handle_repair_history, pattern="^repairs$"))
    app.add_handler(CallbackQueryHandler(handle_payments, pattern="^payments$"))
    app.add_handler(conv_handler_pay_all)
    app.add_handler(postpone_conv_handler)
    app.add_handler(confirm_postpone_handler)

    # --- –•–µ–Ω–¥–ª–µ—Ä—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ —Ä–µ–º–æ–Ω—Ç–∞ ---
    app.add_handler(register_conv_handler)
    app.add_handler(repair_conv_handler)
    app.add_handler(short_repair_conv_handler)
    app.add_handler(repair_entry_handler)
    app.add_handler(repair_back_handler)

    # --- –ê–¥–º–∏–Ω–∫–∞ ---
    app.add_handler(CallbackQueryHandler(start_edit_client, pattern=r"^edit_client:\d+$"))
    app.add_handler(admin_register_conv_handler)
    app.add_handler(edit_conv_handler)
    register_admin_handlers(app)
    app.add_handler(CallbackQueryHandler(assign_repair_callback, pattern=r"^assign_repair:\d+$"))
    app.add_handler(CallbackQueryHandler(handle_master_selection, pattern=r"^select_master:\d+$"))

    # --- –ö–æ–º–∞–Ω–¥—ã ---
    #app.add_handler(CommandHandler("start", start_command))
    app.add_handler(start_handler)

    # --- –ö–æ–º–∞–Ω–¥—ã Telegram /start, /help –∏ —Ç.–¥. ---
    await setup_bot_commands(app.bot)
    #app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_faq))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")

    # --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ---
    scheduler = AsyncIOScheduler()
    scheduler.add_job(
        send_payment_notifications_with_button,
        "interval",
        minutes=67,
        args=[app.bot]
    )
    scheduler.start()

    await app.run_polling()


if __name__ == "__main__":
    nest_asyncio.apply()
    asyncio.run(main())
