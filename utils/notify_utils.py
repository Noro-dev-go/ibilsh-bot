from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from database.db import get_connection
from database.clients import get_all_clients
from database.scooters import get_scooters_by_client
from database.payments import get_payments_by_scooter
from database.postpone import get_active_postpones, close_postpone
from utils.time_utils import get_today
import uuid




payment_confirm_registry = {}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
def format_payment_instruction_block(total_amount: int) -> str:
    return (
        f"\nüí≥ <b>–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_amount}‚ÇΩ</b>\n\n"
        f"üìå <b>–í–ê–ñ–ù–û:</b>\n"
        f"1Ô∏è‚É£ –ü–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –Ω–∞ –Ω–æ–º–µ—Ä <b>+79000000000</b>\n"
        f"2Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>—Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞</b> –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: <b>@ibilsh</b>\n"
        f"3Ô∏è‚É£ –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ <b>–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª¬ª –Ω–∏–∂–µ</b>\n\n"
        f"‚ö†Ô∏è –ë–µ–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä—ë—Ö —à–∞–≥–æ–≤ –ø–ª–∞—Ç—ë–∂ <b>–Ω–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω</b>."
    )

async def send_payment_notifications_with_button(bot: Bot, severity: str = "debug"):
    today = get_today()
    print(f"\n=== ‚ñ∂Ô∏è –ó–ê–ü–£–°–ö –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ({severity.upper()}) | TODAY: {today} ===")

    clients = get_all_clients()
    print(f"üë• –ù–∞–π–¥–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {len(clients)}")

    for client in clients:
        tg_id = client['telegram_id']
        client_id = client['id']
        print(f"\nüîç –ö–ª–∏–µ–Ω—Ç: {client['full_name']} (id={client_id})")

        scooters = get_scooters_by_client(client_id)
        print(f"üõµ –°–∫—É—Ç–µ—Ä–æ–≤ —É –∫–ª–∏–µ–Ω—Ç–∞: {len(scooters)}")

        overdue = []
        postponed = []
        normal_payments = []

        # === –°–æ–±–∏—Ä–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∫—É—Ç–µ—Ä—É ===
        for scooter in scooters:
            scooter_id = scooter['id']
            payments = get_payments_by_scooter(scooter_id)
            postpones = get_active_postpones(scooter_id)

            skip_dates = {p[0] for p in postpones}        # original_date
            notify_dates = {p[1] for p in postpones}      # scheduled_date

            print(f"üìú –°–∫—É—Ç–µ—Ä {scooter['model']} ‚Üí –ø–ª–∞—Ç–µ–∂–µ–π: {len(payments)}, –ø–µ—Ä–µ–Ω–æ—Å–æ–≤: {len(postpones)}")

            for p in payments:
                pid, pay_date, amount, is_paid, _ = p
                print(f"   üíµ –ü–ª–∞—Ç—ë–∂ {pid} | –î–∞—Ç–∞: {pay_date} | –°—É–º–º–∞: {amount} | –û–ø–ª–∞—á–µ–Ω: {is_paid}")

                if is_paid:
                    continue

                # –ü—Ä–æ—Å—Ä–æ—á–∫–∞
                if pay_date < today:
                    overdue.append((scooter, p))
                    print(f"     ‚ö†Ô∏è –ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –ü–†–û–°–†–û–ß–ö–ê")

                # –°–µ–≥–æ–¥–Ω—è (–ø–µ—Ä–µ–Ω–æ—Å –∏–ª–∏ –æ–±—ã—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞)
                elif pay_date == today:
                    postpone = next((post for post in postpones if post[1] == pay_date), None)
                    if postpone:
                        postponed.append((scooter, p, postpone))
                        print(f"     üîÅ –ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –ü–ï–†–ï–ù–û–°")
                    else:
                        normal_payments.append((scooter, p))
                        print(f"     ‚úÖ –ü–æ–º–µ—á–µ–Ω –∫–∞–∫ –û–ë–´–ß–ù–ê–Ø –û–ü–õ–ê–¢–ê")

        print(f"üìä –ò—Ç–æ–≥ –ø–æ –∫–ª–∏–µ–Ω—Ç—É ‚Üí –ü—Ä–æ—Å—Ä–æ—á–∫–∏: {len(overdue)}, –ü–µ—Ä–µ–Ω–æ—Å—ã: {len(postponed)}, –û–±—ã—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏: {len(normal_payments)}")

        # === 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ü–†–û–°–†–û–ß–ö–ï ===
        if severity == "overdue":
            print(f"üì® [OVERDUE] –ø—Ä–æ–≤–µ—Ä—è–µ–º...")
            if not overdue:
                print(f"   ‚ùå –ü—Ä–æ—Å—Ä–æ—á–µ–∫ –Ω–µ—Ç ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º.")
                continue

    # ‚úÖ –§–∏–ª—å—Ç—Ä—É–µ–º –ø–ª–∞—Ç–µ–∂–∏: —É–±–∏—Ä–∞–µ–º —Ç–µ, —É –∫–æ—Ç–æ—Ä—ã—Ö –µ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å –Ω–∞ scheduled_date
            filtered_overdue = []
            for scooter, row in overdue:
                scooter_id = scooter["id"]
                payment_date = row[1]  # –¥–∞—Ç–∞ –ø–ª–∞—Ç–µ–∂–∞ (original_date)
                active_postpones = get_active_postpones(scooter_id)

        # –ï—Å–ª–∏ –ø–æ —ç—Ç–æ–π –¥–∞—Ç–µ –µ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å ‚Üí –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Å—Ä–æ—á–µ–∫
                if any(p[0] == payment_date or p[1] == payment_date for p in active_postpones):
                    print(f"   ‚è© –ü—Ä–æ–ø—É—â–µ–Ω–æ: {scooter['model']} ‚Äî –ø–µ—Ä–µ–Ω–æ—Å –Ω–∞–π–¥–µ–Ω –Ω–∞ {payment_date}")
                    continue

                filtered_overdue.append((scooter, row))

            if not filtered_overdue:
                print(f"   ‚ùå –í—Å–µ –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å —Å –ø–µ—Ä–µ–Ω–æ—Å–∞–º–∏ ‚Üí —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ —à–ª—ë–º.")
                continue

            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(filtered_overdue)} –ø—Ä–æ—Å—Ä–æ—á–µ–∫ (–±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤), –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ‚Ä¶")

        # === –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–∫–∞—Ö ===
            total = len(filtered_overdue) * 1500 + sum(p[1][2] for p in filtered_overdue)
            text = "‚ö†Ô∏è <b>–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n\n"
            payment_ids = [p[0] for _, p in filtered_overdue]

            for scooter, row in filtered_overdue:
                text += (
                f"üõµ <b>{scooter['model']}</b>\n"
                f"üìÖ –ù–µ–¥–µ–ª—è: {row[1].strftime('%d.%m.%Y')}\n"
                f"üí∞ –¢–∞—Ä–∏—Ñ: {row[2]}‚ÇΩ + –®—Ç—Ä–∞—Ñ: 1500‚ÇΩ = <b>{row[2] + 1500}‚ÇΩ</b>\n\n"
            )

            text += format_payment_instruction_block(total)
            key = str(uuid.uuid4())[:8]
            payment_confirm_registry[key] = payment_ids
            cb_data = f"confirm_payment:{key}"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=cb_data)]
            ])

            try:
                await bot.send_message(chat_id=tg_id, text=text, reply_markup=keyboard, parse_mode="HTML")
                print(f"‚úÖ [OVERDUE] —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Üí {tg_id}")
            except Exception as e:
                print(f"[‚ùå overdue] {tg_id} ‚Üí {e}")

            continue  # –Ω–µ –¥–∞–µ–º –¥–æ–π—Ç–∏ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

        # === 2. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è / –ø–µ—Ä–µ–Ω–æ—Å—ã ===
        if severity == "standard":
            print(f"üì® [STANDARD] –ø—Ä–æ–≤–µ—Ä—è–µ–º...")
            filtered_overdue = []
            for scooter, row in overdue:
                scooter_id = scooter["id"]
                payment_date = row[1]
                active_postpones = get_active_postpones(scooter_id)

                if any(p[0] == payment_date or p[1] == payment_date for p in active_postpones):
                    print(f"   ‚è© {scooter['model']} {payment_date} –ø—Ä–æ–ø—É—â–µ–Ω (–ø–µ—Ä–µ–Ω–æ—Å –Ω–∞–π–¥–µ–Ω)")
                    continue

                filtered_overdue.append((scooter, row))

            if filtered_overdue:
                print(f"   ‚ö†Ô∏è –£ –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å –ß–ò–°–¢–´–ï –ø—Ä–æ—Å—Ä–æ—á–∫–∏ ‚Üí —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
                continue

            # === –ü–µ—Ä–µ–Ω–æ—Å ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º ===
            if postponed and today.weekday() == 4:
                print(f"   üîÅ –£ –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å—ã ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–Ω–æ—Å–∞—Ö")

                # === –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–µ—Ä–µ–Ω–æ—Å–∞—Ö ===
                total = 0
                text = f"üîÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–Ω–æ—Å—ã –ø–æ {len(postponed)} —Å–∫—É—Ç–µ—Ä–∞–º:\n\n"
                payment_ids = []

                for scooter, payment, postpone in postponed:
                    orig = postpone[0].strftime('%d.%m')
                    sched = postpone[1].strftime('%d.%m')
                    fine = postpone[3]
                    amount = scooter['weekly_price'] * 2 + fine
                    total += amount

                    payment_ids.append(payment[0])
                    sched_pid = next(
                        (p[0] for p in get_payments_by_scooter(scooter['id']) if p[1] == postpone[1]),
                        None
                    )
                    if sched_pid:
                        payment_ids.append(sched_pid)

                    text += (
                        f"üõµ <b>–ú–æ–¥–µ–ª—å: {scooter['model']}</b>\n"
                        f"üìÖ –ü–µ—Ä–µ–Ω–æ—Å: —Å <b>{orig}</b> –Ω–∞ <b>{sched}</b>\n"
                        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{amount}‚ÇΩ</b>\n"
                        f"{'‚ö†Ô∏è –°–æ —à—Ç—Ä–∞—Ñ–æ–º +' + str(fine) + '‚ÇΩ' if fine else '‚úÖ –ë–µ–∑ —à—Ç—Ä–∞—Ñ–∞'}\n\n"
                    )

                text += format_payment_instruction_block(total)
                key = str(uuid.uuid4())[:8]
                payment_confirm_registry[key] = payment_ids
                cb_data = f"confirm_payment:{key}"
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=cb_data)]
                ])

                try:
                    await bot.send_message(chat_id=tg_id, text=text, reply_markup=keyboard, parse_mode="HTML")
                    print(f"‚úÖ [POSTPONED] —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Üí {tg_id}")
                except Exception as e:
                    print(f"[‚ùå postpone] {tg_id} ‚Üí {e}")

                continue

            # === 3. –û–±—ã—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (–µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–∫ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤) ===
            if normal_payments:
                print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(normal_payments)} –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ")

                total = sum(p[2] for _, p in normal_payments)
                payment_ids = [p[0] for _, p in normal_payments]

                text = (
                    f"üìÖ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –æ–ø–ª–∞—Ç—ã –∞—Ä–µ–Ω–¥—ã.\n"
                    f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total}‚ÇΩ</b>\n\n"
                    + format_payment_instruction_block(total)
                )

                key = str(uuid.uuid4())[:8]
                payment_confirm_registry[key] = payment_ids
                cb_data = f"confirm_payment:{key}"
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=cb_data)]
                ])

                try:
                    await bot.send_message(chat_id=tg_id, text=text, reply_markup=keyboard, parse_mode="HTML")
                    print(f"‚úÖ [NORMAL] —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ‚Üí {tg_id}")
                except Exception as e:
                    print(f"[‚ùå normal] {tg_id} ‚Üí {e}")
            else:
                print(f"   ‚ùå –ù–µ—Ç –æ–±—ã—á–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
