# wash_reminder.py
from __future__ import annotations

import io
import os
from datetime import datetime, timedelta, time
from typing import List, Optional

from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
)

# === DB ===
from database.users import get_renters_tg_ids

# === Google Drive (—Å–µ—Ä–≤–∏—Å–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç) ===
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseUpload

from services.google_drive import user_drive_service

from dotenv import load_dotenv

MAX_PHOTOS = 4
AWAIT_PHOTOS = 1

def _env():
    # –±–µ–∑–æ–ø–∞—Å–Ω–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –º–Ω–æ–≥–æ —Ä–∞–∑; –≤–µ—Ä–Ω—ë—Ç –∑–Ω–∞—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞ –º–æ–º–µ–Ω—Ç –≤—ã–∑–æ–≤–∞
    load_dotenv()
    google_sa = os.getenv("GOOGLE_SERVICE_ACCOUNT_JSON") or os.getenv("GOOGLE_SA_JSON")
    folder_id = os.getenv("WASH_DRIVE_FOLDER_ID")
    return google_sa, folder_id


# =========================
# 1) –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
# =========================
async def send_wash_reminders(bot):
    """
    –†–∞—Å—Å—ã–ª–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞–º —Å –∫–Ω–æ–ø–∫–æ–π, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—É—Å–∫–∞–µ—Ç –∑–∞–≥—Ä—É–∑–∫—É —Ñ–æ—Ç–æ –º–æ–π–∫–∏.
    """
    text = (
        "üßº –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Ä–∞–∑ –≤ –¥–≤–µ –Ω–µ–¥–µ–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–º—ã—Ç—å —Å–∫—É—Ç–µ—Ä.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–æ–π—Ç–µ –µ–≥–æ —Å–µ–≥–æ–¥–Ω—è –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—é–¥–∞ 4 —Ñ–æ—Ç–æ (–º–æ–∂–Ω–æ –æ–¥–Ω–∏–º –∞–ª—å–±–æ–º–æ–º)."
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –º–æ–π–∫–∏", callback_data="wash_upload")]
    ])

    tg_ids = get_renters_tg_ids()
    for tg_id in tg_ids:
        try:
            await bot.send_message(chat_id=tg_id, text=text, reply_markup=keyboard)
        except Exception as e:
            print(f"[wash_reminder] failed to send to {tg_id}: {e}")


def next_friday_15():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –±–ª–∏–∂–∞–π—à—É—é –ø—è—Ç–Ω–∏—Ü—É 15:00 (–ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞).
    """
    now = datetime.now()
    days_ahead = (4 - now.weekday()) % 7  # –ø—è—Ç–Ω–∏—Ü–∞ = 4
    candidate_date = (now + timedelta(days=days_ahead)).date()
    candidate_dt = datetime.combine(candidate_date, time(15, 0))
    if candidate_dt <= now:
        candidate_dt += timedelta(weeks=1)
    return candidate_dt


# =========================================
# 2) –•–µ–ª–ø–µ—Ä—ã –¥–ª—è Google Drive (—Å–µ—Ä–≤–∏—Å-–∞–∫–∫)
# =========================================
def _drive_service():
    return user_drive_service()


def _find_or_create_subfolder(service, parent_id: str, name: str) -> str:
    # –∏—â–µ–º –ø–æ–¥–ø–∞–ø–∫—É —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
    query = (
        f"mimeType='application/vnd.google-apps.folder' and name='{name}' "
        f"and '{parent_id}' in parents and trashed=false"
    )
    res = service.files().list(q=query, spaces="drive", fields="files(id,name)", pageSize=1).execute()
    files = res.get("files", [])
    if files:
        return files[0]["id"]

    # —Å–æ–∑–¥–∞—ë–º –ø–æ–¥–ø–∞–ø–∫—É
    body = {"name": name, "mimeType": "application/vnd.google-apps.folder", "parents": [parent_id]}
    folder = service.files().create(body=body, fields="id").execute()
    return folder["id"]


def _upload_jpeg_bytes(service, folder_id: str, filename: str, data: bytes):
    media = MediaIoBaseUpload(io.BytesIO(data), mimetype="image/jpeg", resumable=False)
    body = {"name": filename, "parents": [folder_id]}
    service.files().create(body=body, media_body=media, fields="id").execute()


# ======================================================
# 3) FSM: –∑–∞–ø—É—Å–∫ –ø—Ä–∏—ë–º–∞ —Ñ–æ—Ç–æ + —Å–±–æ—Ä –¥–æ 4 —à—Ç + –≤—ã–≥—Ä—É–∑–∫–∞
# ======================================================
async def start_wash_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –°—Ç–∞—Ä—Ç —Å—Ü–µ–Ω–∞—Ä–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏.
    """
    query = update.callback_query
    await query.answer()

    # –æ–±–Ω—É–ª—è–µ–º –ø–∞—á–∫—É
    context.user_data["wash_pack"] = {
        "photos": [],           # list[file_id]
        "media_group_id": None  # —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –∞–ª—å–±–æ–º
    }

    text = (
        "üßº –û–∫! –ü—Ä–∏—à–ª–∏—Ç–µ *4 —Ñ–æ—Ç–æ –º–æ–π–∫–∏*.\n\n"
        "–ú–æ–∂–Ω–æ *–æ–¥–Ω–∏–º –∞–ª—å–±–æ–º–æ–º* (–¥–æ 10 —Ñ–æ—Ç–æ) –∏–ª–∏ –ø–æ –æ–¥–Ω–æ–π ‚Äî —è –∑–∞—Å—á–∏—Ç–∞—é –ø–µ—Ä–≤—ã–µ 4.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ, –æ—Ç–ø—Ä–∞–≤–ª—é –∏—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É :)"
    )
    await query.message.edit_text(text, parse_mode="Markdown")
    return AWAIT_PHOTOS


async def collect_wash_photos(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ñ–æ—Ç–æ, —É—á–∏—Ç—ã–≤–∞–µ–º –∞–ª—å–±–æ–º –ø–æ media_group_id, –Ω–∞–±–∏—Ä–∞–µ–º –¥–æ 4 —à—Ç—É–∫.
    –ö–∞–∫ —Ç–æ–ª—å–∫–æ –Ω–∞–±—Ä–∞–ª–∏ ‚Äî –≥—Ä—É–∑–∏–º –Ω–∞ Drive –∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ —Å—Ü–µ–Ω–∞—Ä–∏—è.
    """
    msg = update.message
    if not msg or not msg.photo:
        return AWAIT_PHOTOS

    file_id = msg.photo[-1].file_id
    pack = context.user_data.get("wash_pack", {"photos": [], "media_group_id": None})

    # –ï—Å–ª–∏ —ç—Ç–æ –∞–ª—å–±–æ–º ‚Äî —Ñ–∏–∫—Å–∏—Ä—É–µ–º –∏ –ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–∞–¥—Ä—ã –∏–∑ –Ω–µ–≥–æ
    if msg.media_group_id:
        if pack["media_group_id"] is None:
            pack["media_group_id"] = msg.media_group_id
        if pack["media_group_id"] != msg.media_group_id:
            # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —á—É–∂–æ–π –∞–ª—å–±–æ–º, –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∏–ª–∏ —Ç–µ–∫—É—â–∏–π
            return AWAIT_PHOTOS

    if len(pack["photos"]) < MAX_PHOTOS:
        pack["photos"].append(file_id)
        context.user_data["wash_pack"] = pack

    if len(pack["photos"]) >= MAX_PHOTOS:
        await msg.reply_text("–ó–∞–≥—Ä—É–∂–∞—é —Ñ–æ—Ç–æ –Ω–∞ Google Drive‚Ä¶")
        try:
            await _upload_pack_to_drive(update, context, pack["photos"])
            await msg.reply_text("‚úÖ –ì–æ—Ç–æ–≤–æ! –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –Ω–∞ Google Drive.")
        except Exception as e:
            await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞ Google Drive: {e}")
        finally:
            context.user_data.pop("wash_pack", None)
        return ConversationHandler.END

    remain = MAX_PHOTOS - len(pack["photos"])
    await msg.reply_text(f"–ü—Ä–∏–Ω—è—Ç–æ {MAX_PHOTOS - remain}/{MAX_PHOTOS}. –î–æ—à–ª–∏—Ç–µ –µ—â—ë {remain} —Ñ–æ—Ç–æ.")
    return AWAIT_PHOTOS


async def _upload_pack_to_drive(update, context, file_ids):
    user = update.effective_user
    username = (user.username and f"@{user.username}") or None
    owner_tag = username or str(user.id)
    today = datetime.now().date().isoformat()

    service = _drive_service()
    _, wash_folder_id = _env()  # ‚Üê –ø–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID –ø–∞–ø–∫–∏
    subfolder = f"{today}__{owner_tag}"
    pack_folder_id = _find_or_create_subfolder(service, wash_folder_id, subfolder)

    for idx, fid in enumerate(file_ids[:MAX_PHOTOS], start=1):
        tg_file = await context.bot.get_file(fid)
        buff = io.BytesIO()
        await tg_file.download_to_memory(out=buff)
        buff.seek(0)
        filename = f"{today}__{owner_tag}__{idx}.jpg"
        _upload_jpeg_bytes(service, pack_folder_id, filename, buff.getvalue())



# ==========================================================
# 4) –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä ConversationHandler –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ app
# ==========================================================
def build_wash_conversation_handler() -> ConversationHandler:
    """
    –î–æ–±–∞–≤—å –≤ Application:  application.add_handler(build_wash_conversation_handler())
    """
    return ConversationHandler(
        entry_points=[CallbackQueryHandler(start_wash_upload, pattern="^wash_upload$")],
        states={
            AWAIT_PHOTOS: [MessageHandler(filters.PHOTO, collect_wash_photos)],
        },
        fallbacks=[],
        per_message=False,
    )
