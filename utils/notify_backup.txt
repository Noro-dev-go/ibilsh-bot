from telegram import Bot, InlineKeyboardButton, InlineKeyboardMarkup
from database.db import get_connection
from database.clients import get_all_clients
from database.scooters import get_scooters_by_client
from database.payments import get_payments_by_scooter
from database.postpone import get_active_postpones
from utils.time_utils import get_today
from services.yookassa_service import create_payment

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ
async def send_payment_notifications_with_button(bot: Bot, severity: str = "debug"):
    today = get_today()
    clients = get_all_clients()

    for client in clients:
        tg_id = client['telegram_id']
        client_id = client['id']

        scooters = get_scooters_by_client(client_id)
        overdue = []
        postponed = []
        normal_payments = []

        # === –°–æ–±–∏—Ä–∞–µ–º –ø–ª–∞—Ç–µ–∂–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Å–∫—É—Ç–µ—Ä—É ===
        for scooter in scooters:
            scooter_id = scooter['id']
            payments = get_payments_by_scooter(scooter_id)
            postpones = get_active_postpones(scooter_id)

            skip_dates = {p[0] for p in postpones}        # original_date
            notify_dates = {p[1] for p in postpones}      # scheduled_date

            for p in payments:
                pid, pay_date, amount, is_paid, _ = p
                if is_paid:
                    continue

                # –ü—Ä–æ—Å—Ä–æ—á–∫–∞
                if pay_date < today:
                    overdue.append((scooter, p))

                # –°–µ–≥–æ–¥–Ω—è (–ø–µ—Ä–µ–Ω–æ—Å –∏–ª–∏ –æ–±—ã—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞)
                elif pay_date == today:
                    postpone = next((post for post in postpones if post[1] == pay_date), None)
                    if postpone:
                        postponed.append((scooter, p, postpone))

                # –û–±—ã—á–Ω–∞—è –æ–ø–ª–∞—Ç–∞ (–±–µ–∑ –ø–µ—Ä–µ–Ω–æ—Å–∞)
                elif pay_date == today and pay_date not in skip_dates:
                    normal_payments.append((scooter, p))

        # === –§–∏–ª—å—Ç—Ä—É–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫–∏ (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–µ, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å) ===
        filtered_overdue = []
        active_postpones_cache = {}

        for scooter, row in overdue:
            scooter_id = scooter["id"]
            if scooter_id not in active_postpones_cache:
                active_postpones_cache[scooter_id] = get_active_postpones(scooter_id)

            postpones = active_postpones_cache[scooter_id]
            payment_date = row[1]

            # –ï—Å–ª–∏ –ø–æ —ç—Ç–æ–π –¥–∞—Ç–µ –µ—Å—Ç—å –ø–µ—Ä–µ–Ω–æ—Å ‚Äî –Ω–µ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫–æ–π
            if any(p[0] == payment_date for p in postpones):
                continue

            filtered_overdue.append((scooter, row))

        # === 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –ü–†–û–°–†–û–ß–ö–ï ===
        if severity == "overdue":
            if not filtered_overdue:
                continue

            total = len(filtered_overdue) * 1500 + sum(p[1][2] + p[1][3] for p in filtered_overdue)
            text = "‚ö†Ô∏è <b>–£ –≤–∞—Å –µ—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:</b>\n\n"
            payment_ids = [p[0] for _, p in filtered_overdue]

            for scooter, row in filtered_overdue:
                text += (
                    f"üõµ <b>{scooter['model']}</b>\n"
                    f"üìÖ –ù–µ–¥–µ–ª—è: {row[1].strftime('%d.%m.%Y')}\n"
                    f"üí∞ –¢–∞—Ä–∏—Ñ: {row[2]}‚ÇΩ + –®—Ç—Ä–∞—Ñ: 1500‚ÇΩ = <b>{row[2] + 1500}‚ÇΩ</b>\n\n"
                )

            # –û–±—â–∏–π —Ç–µ–∫—Å—Ç —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
            text += format_payment_instruction_block(total)

            # –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫—É
            key = str(uuid.uuid4())[:8]
            payment_confirm_registry[key] = payment_ids
            cb_data = f"confirm_payment:{key}"
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=cb_data)]
            ])

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            try:
                await bot.send_message(chat_id=tg_id, text=text, reply_markup=keyboard, parse_mode="HTML")
            except Exception as e:
                print(f"[‚ùå overdue] {tg_id} ‚Üí {e}")

            # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–µ–Ω–æ—Å—ã –ø–æ —ç—Ç–∏–º –ø–ª–∞—Ç–µ–∂–∞–º (–µ—Å–ª–∏ –±—ã–ª–∏)
            for scooter, row in filtered_overdue:
                scooter_id = scooter["id"]
                payment_date = row[1]
                postpones = get_active_postpones(scooter_id)
                for p in postpones:
                    original_date, scheduled_date = p[0], p[1]
                    if original_date == payment_date:
                        close_postpone(scooter_id, payment_date)

            continue  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É

        # === 2. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è / –ø–µ—Ä–µ–Ω–æ—Å—ã ===
        if severity == "standard":
            if overdue:
                continue  # –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ—Å—Ä–æ—á–∫–∞

            # === –ü–µ—Ä–µ–Ω–æ—Å ‚Äî —Ç–æ–ª—å–∫–æ –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º ===
            if postponed and today.weekday() == 4:
                total = 0
                text = f"üîÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø–µ—Ä–µ–Ω–æ—Å—ã –ø–æ {len(postponed)} —Å–∫—É—Ç–µ—Ä–∞–º:\n\n"
                payment_ids = []

                for scooter, payment, postpone in postponed:
                    orig = postpone[0].strftime('%d.%m')
                    sched = postpone[1].strftime('%d.%m')
                    fine = postpone[5]
                    amount = scooter['weekly_price'] * 2 + fine
                    total += amount

                    payment_ids.append(payment[0])
                    sched_pid = next(
                        (p[0] for p in get_payments_by_scooter(scooter['id']) if p[1] == postpone[1]),
                        None
                    )
                    if sched_pid:
                        payment_ids.append(sched_pid)

                    text += (
                        f"üõµ <b>–ú–æ–¥–µ–ª—å: {scooter['model']}</b>\n"
                        f"üìÖ –ü–µ—Ä–µ–Ω–æ—Å: —Å <b>{orig}</b> –Ω–∞ <b>{sched}</b>\n"
                        f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{amount}‚ÇΩ</b>\n"
                        f"{'‚ö†Ô∏è –°–æ —à—Ç—Ä–∞—Ñ–æ–º +' + str(fine) + '‚ÇΩ' if fine else '‚úÖ –ë–µ–∑ —à—Ç—Ä–∞—Ñ–∞'}\n\n"
                    )

                text += format_payment_instruction_block(total)

                key = str(uuid.uuid4())[:8]
                payment_confirm_registry[key] = payment_ids
                cb_data = f"confirm_payment:{key}"
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=cb_data)]
                ])

                try:
                    await bot.send_message(chat_id=tg_id, text=text, reply_markup=keyboard, parse_mode="HTML")
                except Exception as e:
                    print(f"[‚ùå postpone] {tg_id} ‚Üí {e}")

                # ‚úÖ –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–Ω–æ—Å—ã, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                for scooter, payment, postpone in postponed:
                    scooter_id = scooter["id"]
                    scheduled_date = postpone[1]
                    close_postpone(scooter_id, scheduled_date)

                continue

            # === 3. –û–±—ã—á–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ (–µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–∫ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤) ===
            if normal_payments:
                total = sum(p[2] + p[3] for _, p in normal_payments)
                payment_ids = [p[0] for _, p in normal_payments]

                text = (
                    f"üìÖ –°–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å –æ–ø–ª–∞—Ç—ã –∞—Ä–µ–Ω–¥—ã.\n"
                    f"üí∞ –°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: <b>{total}‚ÇΩ</b>\n\n"
                    + format_payment_instruction_block(total)
                )

                key = str(uuid.uuid4())[:8]
                payment_confirm_registry[key] = payment_ids
                cb_data = f"confirm_payment:{key}"
                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=cb_data)]
                ])

                try:
                    await bot.send_message(chat_id=tg_id, text=text, reply_markup=keyboard, parse_mode="HTML")
                except Exception as e:
                    print(f"[‚ùå normal] {tg_id} ‚Üí {e}")